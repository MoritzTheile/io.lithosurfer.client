/*
 * Lithosurfer API: Geochem model
 * Please have a look at the <a href=\"https://docs.google.com/presentation/d/1XcjHiopwNzasUvwC_7UZlkou82tfstEdqGZxqXITV3s/edit?usp=sharing\">High Level Docs</a> for getting the whole picture.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@lithosurfer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelGeneratedFromSwagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []
 */
@ApiModel(description = "@lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-07T06:47:05.458Z")
public class LaserMetadataDTO {
  @SerializedName("ablationDuration")
  private Integer ablationDuration = null;

  @SerializedName("additionalGas")
  private String additionalGas = null;

  @SerializedName("additionalGasFlow")
  private Float additionalGasFlow = null;

  @SerializedName("analyticalSequence")
  private String analyticalSequence = null;

  @SerializedName("blankDuration")
  private Integer blankDuration = null;

  @SerializedName("calibratingReferenceMaterial1Id")
  private Long calibratingReferenceMaterial1Id = null;

  @SerializedName("calibratingReferenceMaterial1Name")
  private String calibratingReferenceMaterial1Name = null;

  @SerializedName("calibratingReferenceMaterial1Purpose")
  private String calibratingReferenceMaterial1Purpose = null;

  @SerializedName("calibratingReferenceMaterial2Id")
  private Long calibratingReferenceMaterial2Id = null;

  @SerializedName("calibratingReferenceMaterial2Name")
  private String calibratingReferenceMaterial2Name = null;

  @SerializedName("calibratingReferenceMaterial2Purpose")
  private String calibratingReferenceMaterial2Purpose = null;

  @SerializedName("calibratingReferenceMaterial3Id")
  private Long calibratingReferenceMaterial3Id = null;

  @SerializedName("calibratingReferenceMaterial3Name")
  private String calibratingReferenceMaterial3Name = null;

  @SerializedName("calibratingReferenceMaterial3Purpose")
  private String calibratingReferenceMaterial3Purpose = null;

  @SerializedName("calibrationStrategy")
  private String calibrationStrategy = null;

  @SerializedName("carrierGas")
  private String carrierGas = null;

  @SerializedName("carrierGasFlow")
  private Float carrierGasFlow = null;

  @SerializedName("cellModel")
  private String cellModel = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("icpmsmetadataId")
  private Long icpmsmetadataId = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("laserFluence")
  private Float laserFluence = null;

  @SerializedName("laserRepetitionRate")
  private Integer laserRepetitionRate = null;

  @SerializedName("laserSamplingModeId")
  private Long laserSamplingModeId = null;

  @SerializedName("laserSamplingModeName")
  private String laserSamplingModeName = null;

  @SerializedName("laserSpotSize")
  private Integer laserSpotSize = null;

  @SerializedName("laserSystemId")
  private Long laserSystemId = null;

  @SerializedName("laserSystemName")
  private String laserSystemName = null;

  @SerializedName("laserWavelengthId")
  private Long laserWavelengthId = null;

  @SerializedName("laserWavelengthName")
  private String laserWavelengthName = null;

  @SerializedName("mixingDevice")
  private String mixingDevice = null;

  @SerializedName("pulseWidthUnitId")
  private Long pulseWidthUnitId = null;

  @SerializedName("pulseWidthUnitName")
  private String pulseWidthUnitName = null;

  @SerializedName("pulseWidthValue")
  private Integer pulseWidthValue = null;

  @SerializedName("standardInternal1Id")
  private Long standardInternal1Id = null;

  @SerializedName("standardInternal1Name")
  private String standardInternal1Name = null;

  @SerializedName("standardInternal2Id")
  private Long standardInternal2Id = null;

  @SerializedName("standardInternal2Name")
  private String standardInternal2Name = null;

  @SerializedName("standardInternal3Id")
  private Long standardInternal3Id = null;

  @SerializedName("standardInternal3Name")
  private String standardInternal3Name = null;

  @SerializedName("tubingMaterialId")
  private Long tubingMaterialId = null;

  @SerializedName("tubingMaterialInternalDiameterId")
  private Long tubingMaterialInternalDiameterId = null;

  @SerializedName("tubingMaterialInternalDiameterName")
  private String tubingMaterialInternalDiameterName = null;

  @SerializedName("tubingMaterialLength")
  private Float tubingMaterialLength = null;

  @SerializedName("tubingMaterialName")
  private String tubingMaterialName = null;

  @SerializedName("typeAblationCellId")
  private Long typeAblationCellId = null;

  @SerializedName("typeAblationCellName")
  private String typeAblationCellName = null;

  @SerializedName("washTime")
  private Integer washTime = null;

  public LaserMetadataDTO ablationDuration(Integer ablationDuration) {
    this.ablationDuration = ablationDuration;
    return this;
  }

   /**
   * @lithoLabel [Ablation Duration (s)] @lithoDocumentation [Duration of laser ablation (s)]
   * @return ablationDuration
  **/
  @ApiModelProperty(value = "@lithoLabel [Ablation Duration (s)] @lithoDocumentation [Duration of laser ablation (s)]")
  public Integer getAblationDuration() {
    return ablationDuration;
  }

  public void setAblationDuration(Integer ablationDuration) {
    this.ablationDuration = ablationDuration;
  }

  public LaserMetadataDTO additionalGas(String additionalGas) {
    this.additionalGas = additionalGas;
    return this;
  }

   /**
   * @lithoLabel [Additional Gas] @lithoDocumentation [Type of additional carrier gas (e.g. N2, H)]
   * @return additionalGas
  **/
  @ApiModelProperty(value = "@lithoLabel [Additional Gas] @lithoDocumentation [Type of additional carrier gas (e.g. N2, H)]")
  public String getAdditionalGas() {
    return additionalGas;
  }

  public void setAdditionalGas(String additionalGas) {
    this.additionalGas = additionalGas;
  }

  public LaserMetadataDTO additionalGasFlow(Float additionalGasFlow) {
    this.additionalGasFlow = additionalGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Additional Gas Flow] @lithoDocumentation [Flow of additional carrier gas (ml.m-1)]
   * @return additionalGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Additional Gas Flow] @lithoDocumentation [Flow of additional carrier gas (ml.m-1)]")
  public Float getAdditionalGasFlow() {
    return additionalGasFlow;
  }

  public void setAdditionalGasFlow(Float additionalGasFlow) {
    this.additionalGasFlow = additionalGasFlow;
  }

  public LaserMetadataDTO analyticalSequence(String analyticalSequence) {
    this.analyticalSequence = analyticalSequence;
    return this;
  }

   /**
   * @lithoLabel [Analytical sequence] @lithoDocumentation [Description of the analytical sequence/run. E.g. Sequence is composed of 2 procedurial blanks, 11 unknown, 2 BCR-2, bracketed by 2 duplicates of BHVO-2 ran as calibration solution]
   * @return analyticalSequence
  **/
  @ApiModelProperty(value = "@lithoLabel [Analytical sequence] @lithoDocumentation [Description of the analytical sequence/run. E.g. Sequence is composed of 2 procedurial blanks, 11 unknown, 2 BCR-2, bracketed by 2 duplicates of BHVO-2 ran as calibration solution]")
  public String getAnalyticalSequence() {
    return analyticalSequence;
  }

  public void setAnalyticalSequence(String analyticalSequence) {
    this.analyticalSequence = analyticalSequence;
  }

  public LaserMetadataDTO blankDuration(Integer blankDuration) {
    this.blankDuration = blankDuration;
    return this;
  }

   /**
   * @lithoLabel [Gas Blank Duration (s)] @lithoDocumentation [Duration of gas blank/instrument backround measurement (s)]
   * @return blankDuration
  **/
  @ApiModelProperty(value = "@lithoLabel [Gas Blank Duration (s)] @lithoDocumentation [Duration of gas blank/instrument backround measurement (s)]")
  public Integer getBlankDuration() {
    return blankDuration;
  }

  public void setBlankDuration(Integer blankDuration) {
    this.blankDuration = blankDuration;
  }

  public LaserMetadataDTO calibratingReferenceMaterial1Id(Long calibratingReferenceMaterial1Id) {
    this.calibratingReferenceMaterial1Id = calibratingReferenceMaterial1Id;
    return this;
  }

   /**
   * @lithoLabel [Calibrating Reference Material (#1)] @lithoDocumentation [Name/ID of Reference Material used for calibration (e.g. NIST610, GJ1)]
   * @return calibratingReferenceMaterial1Id
  **/
  @ApiModelProperty(value = "@lithoLabel [Calibrating Reference Material (#1)] @lithoDocumentation [Name/ID of Reference Material used for calibration (e.g. NIST610, GJ1)]")
  public Long getCalibratingReferenceMaterial1Id() {
    return calibratingReferenceMaterial1Id;
  }

  public void setCalibratingReferenceMaterial1Id(Long calibratingReferenceMaterial1Id) {
    this.calibratingReferenceMaterial1Id = calibratingReferenceMaterial1Id;
  }

  public LaserMetadataDTO calibratingReferenceMaterial1Name(String calibratingReferenceMaterial1Name) {
    this.calibratingReferenceMaterial1Name = calibratingReferenceMaterial1Name;
    return this;
  }

   /**
   * Get calibratingReferenceMaterial1Name
   * @return calibratingReferenceMaterial1Name
  **/
  @ApiModelProperty(value = "")
  public String getCalibratingReferenceMaterial1Name() {
    return calibratingReferenceMaterial1Name;
  }

  public void setCalibratingReferenceMaterial1Name(String calibratingReferenceMaterial1Name) {
    this.calibratingReferenceMaterial1Name = calibratingReferenceMaterial1Name;
  }

  public LaserMetadataDTO calibratingReferenceMaterial1Purpose(String calibratingReferenceMaterial1Purpose) {
    this.calibratingReferenceMaterial1Purpose = calibratingReferenceMaterial1Purpose;
    return this;
  }

   /**
   * @lithoLabel [Purpose of Calibrating Reference Material (#1)] @lithoDocumentation [Purpose of Calibrating Reference Material (e.g. U-Pb, Trace elements, PGEs, specific set of TE [specify])]
   * @return calibratingReferenceMaterial1Purpose
  **/
  @ApiModelProperty(value = "@lithoLabel [Purpose of Calibrating Reference Material (#1)] @lithoDocumentation [Purpose of Calibrating Reference Material (e.g. U-Pb, Trace elements, PGEs, specific set of TE [specify])]")
  public String getCalibratingReferenceMaterial1Purpose() {
    return calibratingReferenceMaterial1Purpose;
  }

  public void setCalibratingReferenceMaterial1Purpose(String calibratingReferenceMaterial1Purpose) {
    this.calibratingReferenceMaterial1Purpose = calibratingReferenceMaterial1Purpose;
  }

  public LaserMetadataDTO calibratingReferenceMaterial2Id(Long calibratingReferenceMaterial2Id) {
    this.calibratingReferenceMaterial2Id = calibratingReferenceMaterial2Id;
    return this;
  }

   /**
   * @lithoLabel [Calibrating Reference Material #2 (if applicable)] @lithoDocumentation [Name/ID of Reference Material used for calibration (e.g. NIST610, GJ1)]
   * @return calibratingReferenceMaterial2Id
  **/
  @ApiModelProperty(value = "@lithoLabel [Calibrating Reference Material #2 (if applicable)] @lithoDocumentation [Name/ID of Reference Material used for calibration (e.g. NIST610, GJ1)]")
  public Long getCalibratingReferenceMaterial2Id() {
    return calibratingReferenceMaterial2Id;
  }

  public void setCalibratingReferenceMaterial2Id(Long calibratingReferenceMaterial2Id) {
    this.calibratingReferenceMaterial2Id = calibratingReferenceMaterial2Id;
  }

  public LaserMetadataDTO calibratingReferenceMaterial2Name(String calibratingReferenceMaterial2Name) {
    this.calibratingReferenceMaterial2Name = calibratingReferenceMaterial2Name;
    return this;
  }

   /**
   * Get calibratingReferenceMaterial2Name
   * @return calibratingReferenceMaterial2Name
  **/
  @ApiModelProperty(value = "")
  public String getCalibratingReferenceMaterial2Name() {
    return calibratingReferenceMaterial2Name;
  }

  public void setCalibratingReferenceMaterial2Name(String calibratingReferenceMaterial2Name) {
    this.calibratingReferenceMaterial2Name = calibratingReferenceMaterial2Name;
  }

  public LaserMetadataDTO calibratingReferenceMaterial2Purpose(String calibratingReferenceMaterial2Purpose) {
    this.calibratingReferenceMaterial2Purpose = calibratingReferenceMaterial2Purpose;
    return this;
  }

   /**
   * @lithoLabel [Purpose of Calibrating Reference Material #2] @lithoDocumentation [Purpose of Calibrating Reference Material (e.g. specific set of TE [specify])]
   * @return calibratingReferenceMaterial2Purpose
  **/
  @ApiModelProperty(value = "@lithoLabel [Purpose of Calibrating Reference Material #2] @lithoDocumentation [Purpose of Calibrating Reference Material (e.g. specific set of TE [specify])]")
  public String getCalibratingReferenceMaterial2Purpose() {
    return calibratingReferenceMaterial2Purpose;
  }

  public void setCalibratingReferenceMaterial2Purpose(String calibratingReferenceMaterial2Purpose) {
    this.calibratingReferenceMaterial2Purpose = calibratingReferenceMaterial2Purpose;
  }

  public LaserMetadataDTO calibratingReferenceMaterial3Id(Long calibratingReferenceMaterial3Id) {
    this.calibratingReferenceMaterial3Id = calibratingReferenceMaterial3Id;
    return this;
  }

   /**
   * @lithoLabel [Calibrating Reference Material #3 (if applicable)] @lithoDocumentation [Name/ID of Reference Material used for calibration (e.g. NIST610, GJ1)]
   * @return calibratingReferenceMaterial3Id
  **/
  @ApiModelProperty(value = "@lithoLabel [Calibrating Reference Material #3 (if applicable)] @lithoDocumentation [Name/ID of Reference Material used for calibration (e.g. NIST610, GJ1)]")
  public Long getCalibratingReferenceMaterial3Id() {
    return calibratingReferenceMaterial3Id;
  }

  public void setCalibratingReferenceMaterial3Id(Long calibratingReferenceMaterial3Id) {
    this.calibratingReferenceMaterial3Id = calibratingReferenceMaterial3Id;
  }

  public LaserMetadataDTO calibratingReferenceMaterial3Name(String calibratingReferenceMaterial3Name) {
    this.calibratingReferenceMaterial3Name = calibratingReferenceMaterial3Name;
    return this;
  }

   /**
   * Get calibratingReferenceMaterial3Name
   * @return calibratingReferenceMaterial3Name
  **/
  @ApiModelProperty(value = "")
  public String getCalibratingReferenceMaterial3Name() {
    return calibratingReferenceMaterial3Name;
  }

  public void setCalibratingReferenceMaterial3Name(String calibratingReferenceMaterial3Name) {
    this.calibratingReferenceMaterial3Name = calibratingReferenceMaterial3Name;
  }

  public LaserMetadataDTO calibratingReferenceMaterial3Purpose(String calibratingReferenceMaterial3Purpose) {
    this.calibratingReferenceMaterial3Purpose = calibratingReferenceMaterial3Purpose;
    return this;
  }

   /**
   * @lithoLabel [Purpose of Calibrating Reference Material #3] @lithoDocumentation [Purpose of Calibrating Reference Material (e.g. specific set of TE [specify])]
   * @return calibratingReferenceMaterial3Purpose
  **/
  @ApiModelProperty(value = "@lithoLabel [Purpose of Calibrating Reference Material #3] @lithoDocumentation [Purpose of Calibrating Reference Material (e.g. specific set of TE [specify])]")
  public String getCalibratingReferenceMaterial3Purpose() {
    return calibratingReferenceMaterial3Purpose;
  }

  public void setCalibratingReferenceMaterial3Purpose(String calibratingReferenceMaterial3Purpose) {
    this.calibratingReferenceMaterial3Purpose = calibratingReferenceMaterial3Purpose;
  }

  public LaserMetadataDTO calibrationStrategy(String calibrationStrategy) {
    this.calibrationStrategy = calibrationStrategy;
    return this;
  }

   /**
   * @lithoLabel [Calibration Strategy] @lithoDocumentation [Strategy used for calibration of the instrument and quantification (e.g. external calibration; single internal standard addition; multiple internal standard addition; enriched isotopes addition; etc)]
   * @return calibrationStrategy
  **/
  @ApiModelProperty(value = "@lithoLabel [Calibration Strategy] @lithoDocumentation [Strategy used for calibration of the instrument and quantification (e.g. external calibration; single internal standard addition; multiple internal standard addition; enriched isotopes addition; etc)]")
  public String getCalibrationStrategy() {
    return calibrationStrategy;
  }

  public void setCalibrationStrategy(String calibrationStrategy) {
    this.calibrationStrategy = calibrationStrategy;
  }

  public LaserMetadataDTO carrierGas(String carrierGas) {
    this.carrierGas = carrierGas;
    return this;
  }

   /**
   * @lithoLabel [Carrier/Ablation Gas] @lithoDocumentation [Type of main carrier/ablation gas (e.g. He, Ar)]
   * @return carrierGas
  **/
  @ApiModelProperty(value = "@lithoLabel [Carrier/Ablation Gas] @lithoDocumentation [Type of main carrier/ablation gas (e.g. He, Ar)]")
  public String getCarrierGas() {
    return carrierGas;
  }

  public void setCarrierGas(String carrierGas) {
    this.carrierGas = carrierGas;
  }

  public LaserMetadataDTO carrierGasFlow(Float carrierGasFlow) {
    this.carrierGasFlow = carrierGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Carrier/Ablation Gas Flow (l.m-1)] @lithoDocumentation [Flow of main carrier/ablation gas (l.m-1)]
   * @return carrierGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Carrier/Ablation Gas Flow (l.m-1)] @lithoDocumentation [Flow of main carrier/ablation gas (l.m-1)]")
  public Float getCarrierGasFlow() {
    return carrierGasFlow;
  }

  public void setCarrierGasFlow(Float carrierGasFlow) {
    this.carrierGasFlow = carrierGasFlow;
  }

  public LaserMetadataDTO cellModel(String cellModel) {
    this.cellModel = cellModel;
    return this;
  }

   /**
   * @lithoLabel [Cell Model] @lithoDocumentation [Brand and model of ablation cell]
   * @return cellModel
  **/
  @ApiModelProperty(value = "@lithoLabel [Cell Model] @lithoDocumentation [Brand and model of ablation cell]")
  public String getCellModel() {
    return cellModel;
  }

  public void setCellModel(String cellModel) {
    this.cellModel = cellModel;
  }

  public LaserMetadataDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * @lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about the laser analytical methods (e.g. custom built laser system using an 193nm ATL-X source...)]
   * @return description
  **/
  @ApiModelProperty(value = "@lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about the laser analytical methods (e.g. custom built laser system using an 193nm ATL-X source...)]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public LaserMetadataDTO icpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
    return this;
  }

   /**
   * Get icpmsmetadataId
   * @return icpmsmetadataId
  **/
  @ApiModelProperty(value = "")
  public Long getIcpmsmetadataId() {
    return icpmsmetadataId;
  }

  public void setIcpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
  }

  public LaserMetadataDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public LaserMetadataDTO laserFluence(Float laserFluence) {
    this.laserFluence = laserFluence;
    return this;
  }

   /**
   * @lithoLabel [Laser Fluence (J.cm-2)] @lithoDocumentation [Laser Fluence (J/cm2)]
   * @return laserFluence
  **/
  @ApiModelProperty(value = "@lithoLabel [Laser Fluence (J.cm-2)] @lithoDocumentation [Laser Fluence (J/cm2)]")
  public Float getLaserFluence() {
    return laserFluence;
  }

  public void setLaserFluence(Float laserFluence) {
    this.laserFluence = laserFluence;
  }

  public LaserMetadataDTO laserRepetitionRate(Integer laserRepetitionRate) {
    this.laserRepetitionRate = laserRepetitionRate;
    return this;
  }

   /**
   * @lithoLabel [Laser Repetition Rate (Hz)] @lithoDocumentation [Laser Repetition Rate (Hz)]
   * @return laserRepetitionRate
  **/
  @ApiModelProperty(value = "@lithoLabel [Laser Repetition Rate (Hz)] @lithoDocumentation [Laser Repetition Rate (Hz)]")
  public Integer getLaserRepetitionRate() {
    return laserRepetitionRate;
  }

  public void setLaserRepetitionRate(Integer laserRepetitionRate) {
    this.laserRepetitionRate = laserRepetitionRate;
  }

  public LaserMetadataDTO laserSamplingModeId(Long laserSamplingModeId) {
    this.laserSamplingModeId = laserSamplingModeId;
    return this;
  }

   /**
   * @lithoLabel [Sampling Mode/Pattern] @lithoDocumentation [Laser sampling method (e.g. static spot, raster)]
   * @return laserSamplingModeId
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampling Mode/Pattern] @lithoDocumentation [Laser sampling method (e.g. static spot, raster)]")
  public Long getLaserSamplingModeId() {
    return laserSamplingModeId;
  }

  public void setLaserSamplingModeId(Long laserSamplingModeId) {
    this.laserSamplingModeId = laserSamplingModeId;
  }

  public LaserMetadataDTO laserSamplingModeName(String laserSamplingModeName) {
    this.laserSamplingModeName = laserSamplingModeName;
    return this;
  }

   /**
   * Get laserSamplingModeName
   * @return laserSamplingModeName
  **/
  @ApiModelProperty(value = "")
  public String getLaserSamplingModeName() {
    return laserSamplingModeName;
  }

  public void setLaserSamplingModeName(String laserSamplingModeName) {
    this.laserSamplingModeName = laserSamplingModeName;
  }

  public LaserMetadataDTO laserSpotSize(Integer laserSpotSize) {
    this.laserSpotSize = laserSpotSize;
    return this;
  }

   /**
   * @lithoLabel [Laser Spot Size (µm)] @lithoDocumentation [Laser Spot Size (µm)]
   * @return laserSpotSize
  **/
  @ApiModelProperty(value = "@lithoLabel [Laser Spot Size (µm)] @lithoDocumentation [Laser Spot Size (µm)]")
  public Integer getLaserSpotSize() {
    return laserSpotSize;
  }

  public void setLaserSpotSize(Integer laserSpotSize) {
    this.laserSpotSize = laserSpotSize;
  }

  public LaserMetadataDTO laserSystemId(Long laserSystemId) {
    this.laserSystemId = laserSystemId;
    return this;
  }

   /**
   * @lithoLabel [Laser System] @lithoDocumentation [Brand and model of Laser System]
   * @return laserSystemId
  **/
  @ApiModelProperty(value = "@lithoLabel [Laser System] @lithoDocumentation [Brand and model of Laser System]")
  public Long getLaserSystemId() {
    return laserSystemId;
  }

  public void setLaserSystemId(Long laserSystemId) {
    this.laserSystemId = laserSystemId;
  }

  public LaserMetadataDTO laserSystemName(String laserSystemName) {
    this.laserSystemName = laserSystemName;
    return this;
  }

   /**
   * Get laserSystemName
   * @return laserSystemName
  **/
  @ApiModelProperty(value = "")
  public String getLaserSystemName() {
    return laserSystemName;
  }

  public void setLaserSystemName(String laserSystemName) {
    this.laserSystemName = laserSystemName;
  }

  public LaserMetadataDTO laserWavelengthId(Long laserWavelengthId) {
    this.laserWavelengthId = laserWavelengthId;
    return this;
  }

   /**
   * @lithoLabel [Laser Wavelenght (nm)] @lithoDocumentation [Laser Wavelength (nm) (e.g. 193nm, 213nm)]
   * @return laserWavelengthId
  **/
  @ApiModelProperty(value = "@lithoLabel [Laser Wavelenght (nm)] @lithoDocumentation [Laser Wavelength (nm) (e.g. 193nm, 213nm)]")
  public Long getLaserWavelengthId() {
    return laserWavelengthId;
  }

  public void setLaserWavelengthId(Long laserWavelengthId) {
    this.laserWavelengthId = laserWavelengthId;
  }

  public LaserMetadataDTO laserWavelengthName(String laserWavelengthName) {
    this.laserWavelengthName = laserWavelengthName;
    return this;
  }

   /**
   * Get laserWavelengthName
   * @return laserWavelengthName
  **/
  @ApiModelProperty(value = "")
  public String getLaserWavelengthName() {
    return laserWavelengthName;
  }

  public void setLaserWavelengthName(String laserWavelengthName) {
    this.laserWavelengthName = laserWavelengthName;
  }

  public LaserMetadataDTO mixingDevice(String mixingDevice) {
    this.mixingDevice = mixingDevice;
    return this;
  }

   /**
   * @lithoLabel [Mixing device] @lithoDocumentation [Mixing/smoothing device used to homogenise/smooth the signal (e.g. Y connector, Bulb, Squid, Coil)]
   * @return mixingDevice
  **/
  @ApiModelProperty(value = "@lithoLabel [Mixing device] @lithoDocumentation [Mixing/smoothing device used to homogenise/smooth the signal (e.g. Y connector, Bulb, Squid, Coil)]")
  public String getMixingDevice() {
    return mixingDevice;
  }

  public void setMixingDevice(String mixingDevice) {
    this.mixingDevice = mixingDevice;
  }

  public LaserMetadataDTO pulseWidthUnitId(Long pulseWidthUnitId) {
    this.pulseWidthUnitId = pulseWidthUnitId;
    return this;
  }

   /**
   * @lithoLabel [Pulse Width Unit] @lithoDocumentation [Pulse Width of Laser (e.g. nanosecond, femtosecond)]
   * @return pulseWidthUnitId
  **/
  @ApiModelProperty(value = "@lithoLabel [Pulse Width Unit] @lithoDocumentation [Pulse Width of Laser (e.g. nanosecond, femtosecond)]")
  public Long getPulseWidthUnitId() {
    return pulseWidthUnitId;
  }

  public void setPulseWidthUnitId(Long pulseWidthUnitId) {
    this.pulseWidthUnitId = pulseWidthUnitId;
  }

  public LaserMetadataDTO pulseWidthUnitName(String pulseWidthUnitName) {
    this.pulseWidthUnitName = pulseWidthUnitName;
    return this;
  }

   /**
   * Get pulseWidthUnitName
   * @return pulseWidthUnitName
  **/
  @ApiModelProperty(value = "")
  public String getPulseWidthUnitName() {
    return pulseWidthUnitName;
  }

  public void setPulseWidthUnitName(String pulseWidthUnitName) {
    this.pulseWidthUnitName = pulseWidthUnitName;
  }

  public LaserMetadataDTO pulseWidthValue(Integer pulseWidthValue) {
    this.pulseWidthValue = pulseWidthValue;
    return this;
  }

   /**
   * @lithoLabel [Pulse Width Value] @lithoDocumentation [Pulse Width of Laser (e.g. 20 ns; 290 fs)]
   * @return pulseWidthValue
  **/
  @ApiModelProperty(value = "@lithoLabel [Pulse Width Value] @lithoDocumentation [Pulse Width of Laser (e.g. 20 ns; 290 fs)]")
  public Integer getPulseWidthValue() {
    return pulseWidthValue;
  }

  public void setPulseWidthValue(Integer pulseWidthValue) {
    this.pulseWidthValue = pulseWidthValue;
  }

  public LaserMetadataDTO standardInternal1Id(Long standardInternal1Id) {
    this.standardInternal1Id = standardInternal1Id;
    return this;
  }

   /**
   * @lithoLabel [Internal Standard (#1)] @lithoDocumentation [Isotope used for internal standardisation (e.g. 42Ca)]
   * @return standardInternal1Id
  **/
  @ApiModelProperty(value = "@lithoLabel [Internal Standard (#1)] @lithoDocumentation [Isotope used for internal standardisation (e.g. 42Ca)]")
  public Long getStandardInternal1Id() {
    return standardInternal1Id;
  }

  public void setStandardInternal1Id(Long standardInternal1Id) {
    this.standardInternal1Id = standardInternal1Id;
  }

  public LaserMetadataDTO standardInternal1Name(String standardInternal1Name) {
    this.standardInternal1Name = standardInternal1Name;
    return this;
  }

   /**
   * Get standardInternal1Name
   * @return standardInternal1Name
  **/
  @ApiModelProperty(value = "")
  public String getStandardInternal1Name() {
    return standardInternal1Name;
  }

  public void setStandardInternal1Name(String standardInternal1Name) {
    this.standardInternal1Name = standardInternal1Name;
  }

  public LaserMetadataDTO standardInternal2Id(Long standardInternal2Id) {
    this.standardInternal2Id = standardInternal2Id;
    return this;
  }

   /**
   * @lithoLabel [Internal Standard #2 (if applicable)] @lithoDocumentation [Isotope used for internal standardisation (e.g. 42Ca)]
   * @return standardInternal2Id
  **/
  @ApiModelProperty(value = "@lithoLabel [Internal Standard #2 (if applicable)] @lithoDocumentation [Isotope used for internal standardisation (e.g. 42Ca)]")
  public Long getStandardInternal2Id() {
    return standardInternal2Id;
  }

  public void setStandardInternal2Id(Long standardInternal2Id) {
    this.standardInternal2Id = standardInternal2Id;
  }

  public LaserMetadataDTO standardInternal2Name(String standardInternal2Name) {
    this.standardInternal2Name = standardInternal2Name;
    return this;
  }

   /**
   * Get standardInternal2Name
   * @return standardInternal2Name
  **/
  @ApiModelProperty(value = "")
  public String getStandardInternal2Name() {
    return standardInternal2Name;
  }

  public void setStandardInternal2Name(String standardInternal2Name) {
    this.standardInternal2Name = standardInternal2Name;
  }

  public LaserMetadataDTO standardInternal3Id(Long standardInternal3Id) {
    this.standardInternal3Id = standardInternal3Id;
    return this;
  }

   /**
   * @lithoLabel [Internal Standard #3 (if applicable)] @lithoDocumentation [Isotope used for internal standardisation (e.g. 42Ca)]
   * @return standardInternal3Id
  **/
  @ApiModelProperty(value = "@lithoLabel [Internal Standard #3 (if applicable)] @lithoDocumentation [Isotope used for internal standardisation (e.g. 42Ca)]")
  public Long getStandardInternal3Id() {
    return standardInternal3Id;
  }

  public void setStandardInternal3Id(Long standardInternal3Id) {
    this.standardInternal3Id = standardInternal3Id;
  }

  public LaserMetadataDTO standardInternal3Name(String standardInternal3Name) {
    this.standardInternal3Name = standardInternal3Name;
    return this;
  }

   /**
   * Get standardInternal3Name
   * @return standardInternal3Name
  **/
  @ApiModelProperty(value = "")
  public String getStandardInternal3Name() {
    return standardInternal3Name;
  }

  public void setStandardInternal3Name(String standardInternal3Name) {
    this.standardInternal3Name = standardInternal3Name;
  }

  public LaserMetadataDTO tubingMaterialId(Long tubingMaterialId) {
    this.tubingMaterialId = tubingMaterialId;
    return this;
  }

   /**
   * @lithoLabel [Interface Tubing Material] @lithoDocumentation [Material the interface/transport tubing is made from (e.g. Nylon, PVC, PFA)]
   * @return tubingMaterialId
  **/
  @ApiModelProperty(value = "@lithoLabel [Interface Tubing Material] @lithoDocumentation [Material the interface/transport tubing is made from (e.g. Nylon, PVC, PFA)]")
  public Long getTubingMaterialId() {
    return tubingMaterialId;
  }

  public void setTubingMaterialId(Long tubingMaterialId) {
    this.tubingMaterialId = tubingMaterialId;
  }

  public LaserMetadataDTO tubingMaterialInternalDiameterId(Long tubingMaterialInternalDiameterId) {
    this.tubingMaterialInternalDiameterId = tubingMaterialInternalDiameterId;
    return this;
  }

   /**
   * @lithoLabel [Interface Tubing Internal Diameter] @lithoDocumentation [Internal diameter of the interface/transport tubing (e.g. 1/4\&quot;, 1/8\&quot;, 6 mm)]
   * @return tubingMaterialInternalDiameterId
  **/
  @ApiModelProperty(value = "@lithoLabel [Interface Tubing Internal Diameter] @lithoDocumentation [Internal diameter of the interface/transport tubing (e.g. 1/4\", 1/8\", 6 mm)]")
  public Long getTubingMaterialInternalDiameterId() {
    return tubingMaterialInternalDiameterId;
  }

  public void setTubingMaterialInternalDiameterId(Long tubingMaterialInternalDiameterId) {
    this.tubingMaterialInternalDiameterId = tubingMaterialInternalDiameterId;
  }

  public LaserMetadataDTO tubingMaterialInternalDiameterName(String tubingMaterialInternalDiameterName) {
    this.tubingMaterialInternalDiameterName = tubingMaterialInternalDiameterName;
    return this;
  }

   /**
   * Get tubingMaterialInternalDiameterName
   * @return tubingMaterialInternalDiameterName
  **/
  @ApiModelProperty(value = "")
  public String getTubingMaterialInternalDiameterName() {
    return tubingMaterialInternalDiameterName;
  }

  public void setTubingMaterialInternalDiameterName(String tubingMaterialInternalDiameterName) {
    this.tubingMaterialInternalDiameterName = tubingMaterialInternalDiameterName;
  }

  public LaserMetadataDTO tubingMaterialLength(Float tubingMaterialLength) {
    this.tubingMaterialLength = tubingMaterialLength;
    return this;
  }

   /**
   * @lithoLabel [Interface Tubing length (cm)] @lithoDocumentation [Length of the interface/transport tubing (cm)]
   * @return tubingMaterialLength
  **/
  @ApiModelProperty(value = "@lithoLabel [Interface Tubing length (cm)] @lithoDocumentation [Length of the interface/transport tubing (cm)]")
  public Float getTubingMaterialLength() {
    return tubingMaterialLength;
  }

  public void setTubingMaterialLength(Float tubingMaterialLength) {
    this.tubingMaterialLength = tubingMaterialLength;
  }

  public LaserMetadataDTO tubingMaterialName(String tubingMaterialName) {
    this.tubingMaterialName = tubingMaterialName;
    return this;
  }

   /**
   * Get tubingMaterialName
   * @return tubingMaterialName
  **/
  @ApiModelProperty(value = "")
  public String getTubingMaterialName() {
    return tubingMaterialName;
  }

  public void setTubingMaterialName(String tubingMaterialName) {
    this.tubingMaterialName = tubingMaterialName;
  }

  public LaserMetadataDTO typeAblationCellId(Long typeAblationCellId) {
    this.typeAblationCellId = typeAblationCellId;
    return this;
  }

   /**
   * @lithoLabel [Type of Ablation Cell] @lithoDocumentation [Type of Ablation Cell (e.g single volume; two-volume cell)]
   * @return typeAblationCellId
  **/
  @ApiModelProperty(value = "@lithoLabel [Type of Ablation Cell] @lithoDocumentation [Type of Ablation Cell (e.g single volume; two-volume cell)]")
  public Long getTypeAblationCellId() {
    return typeAblationCellId;
  }

  public void setTypeAblationCellId(Long typeAblationCellId) {
    this.typeAblationCellId = typeAblationCellId;
  }

  public LaserMetadataDTO typeAblationCellName(String typeAblationCellName) {
    this.typeAblationCellName = typeAblationCellName;
    return this;
  }

   /**
   * Get typeAblationCellName
   * @return typeAblationCellName
  **/
  @ApiModelProperty(value = "")
  public String getTypeAblationCellName() {
    return typeAblationCellName;
  }

  public void setTypeAblationCellName(String typeAblationCellName) {
    this.typeAblationCellName = typeAblationCellName;
  }

  public LaserMetadataDTO washTime(Integer washTime) {
    this.washTime = washTime;
    return this;
  }

   /**
   * @lithoLabel [Wash time (s)] @lithoDocumentation [Duration of washing time between solutions (s)]
   * @return washTime
  **/
  @ApiModelProperty(value = "@lithoLabel [Wash time (s)] @lithoDocumentation [Duration of washing time between solutions (s)]")
  public Integer getWashTime() {
    return washTime;
  }

  public void setWashTime(Integer washTime) {
    this.washTime = washTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaserMetadataDTO laserMetadataDTO = (LaserMetadataDTO) o;
    return Objects.equals(this.ablationDuration, laserMetadataDTO.ablationDuration) &&
        Objects.equals(this.additionalGas, laserMetadataDTO.additionalGas) &&
        Objects.equals(this.additionalGasFlow, laserMetadataDTO.additionalGasFlow) &&
        Objects.equals(this.analyticalSequence, laserMetadataDTO.analyticalSequence) &&
        Objects.equals(this.blankDuration, laserMetadataDTO.blankDuration) &&
        Objects.equals(this.calibratingReferenceMaterial1Id, laserMetadataDTO.calibratingReferenceMaterial1Id) &&
        Objects.equals(this.calibratingReferenceMaterial1Name, laserMetadataDTO.calibratingReferenceMaterial1Name) &&
        Objects.equals(this.calibratingReferenceMaterial1Purpose, laserMetadataDTO.calibratingReferenceMaterial1Purpose) &&
        Objects.equals(this.calibratingReferenceMaterial2Id, laserMetadataDTO.calibratingReferenceMaterial2Id) &&
        Objects.equals(this.calibratingReferenceMaterial2Name, laserMetadataDTO.calibratingReferenceMaterial2Name) &&
        Objects.equals(this.calibratingReferenceMaterial2Purpose, laserMetadataDTO.calibratingReferenceMaterial2Purpose) &&
        Objects.equals(this.calibratingReferenceMaterial3Id, laserMetadataDTO.calibratingReferenceMaterial3Id) &&
        Objects.equals(this.calibratingReferenceMaterial3Name, laserMetadataDTO.calibratingReferenceMaterial3Name) &&
        Objects.equals(this.calibratingReferenceMaterial3Purpose, laserMetadataDTO.calibratingReferenceMaterial3Purpose) &&
        Objects.equals(this.calibrationStrategy, laserMetadataDTO.calibrationStrategy) &&
        Objects.equals(this.carrierGas, laserMetadataDTO.carrierGas) &&
        Objects.equals(this.carrierGasFlow, laserMetadataDTO.carrierGasFlow) &&
        Objects.equals(this.cellModel, laserMetadataDTO.cellModel) &&
        Objects.equals(this.description, laserMetadataDTO.description) &&
        Objects.equals(this.icpmsmetadataId, laserMetadataDTO.icpmsmetadataId) &&
        Objects.equals(this.id, laserMetadataDTO.id) &&
        Objects.equals(this.laserFluence, laserMetadataDTO.laserFluence) &&
        Objects.equals(this.laserRepetitionRate, laserMetadataDTO.laserRepetitionRate) &&
        Objects.equals(this.laserSamplingModeId, laserMetadataDTO.laserSamplingModeId) &&
        Objects.equals(this.laserSamplingModeName, laserMetadataDTO.laserSamplingModeName) &&
        Objects.equals(this.laserSpotSize, laserMetadataDTO.laserSpotSize) &&
        Objects.equals(this.laserSystemId, laserMetadataDTO.laserSystemId) &&
        Objects.equals(this.laserSystemName, laserMetadataDTO.laserSystemName) &&
        Objects.equals(this.laserWavelengthId, laserMetadataDTO.laserWavelengthId) &&
        Objects.equals(this.laserWavelengthName, laserMetadataDTO.laserWavelengthName) &&
        Objects.equals(this.mixingDevice, laserMetadataDTO.mixingDevice) &&
        Objects.equals(this.pulseWidthUnitId, laserMetadataDTO.pulseWidthUnitId) &&
        Objects.equals(this.pulseWidthUnitName, laserMetadataDTO.pulseWidthUnitName) &&
        Objects.equals(this.pulseWidthValue, laserMetadataDTO.pulseWidthValue) &&
        Objects.equals(this.standardInternal1Id, laserMetadataDTO.standardInternal1Id) &&
        Objects.equals(this.standardInternal1Name, laserMetadataDTO.standardInternal1Name) &&
        Objects.equals(this.standardInternal2Id, laserMetadataDTO.standardInternal2Id) &&
        Objects.equals(this.standardInternal2Name, laserMetadataDTO.standardInternal2Name) &&
        Objects.equals(this.standardInternal3Id, laserMetadataDTO.standardInternal3Id) &&
        Objects.equals(this.standardInternal3Name, laserMetadataDTO.standardInternal3Name) &&
        Objects.equals(this.tubingMaterialId, laserMetadataDTO.tubingMaterialId) &&
        Objects.equals(this.tubingMaterialInternalDiameterId, laserMetadataDTO.tubingMaterialInternalDiameterId) &&
        Objects.equals(this.tubingMaterialInternalDiameterName, laserMetadataDTO.tubingMaterialInternalDiameterName) &&
        Objects.equals(this.tubingMaterialLength, laserMetadataDTO.tubingMaterialLength) &&
        Objects.equals(this.tubingMaterialName, laserMetadataDTO.tubingMaterialName) &&
        Objects.equals(this.typeAblationCellId, laserMetadataDTO.typeAblationCellId) &&
        Objects.equals(this.typeAblationCellName, laserMetadataDTO.typeAblationCellName) &&
        Objects.equals(this.washTime, laserMetadataDTO.washTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ablationDuration, additionalGas, additionalGasFlow, analyticalSequence, blankDuration, calibratingReferenceMaterial1Id, calibratingReferenceMaterial1Name, calibratingReferenceMaterial1Purpose, calibratingReferenceMaterial2Id, calibratingReferenceMaterial2Name, calibratingReferenceMaterial2Purpose, calibratingReferenceMaterial3Id, calibratingReferenceMaterial3Name, calibratingReferenceMaterial3Purpose, calibrationStrategy, carrierGas, carrierGasFlow, cellModel, description, icpmsmetadataId, id, laserFluence, laserRepetitionRate, laserSamplingModeId, laserSamplingModeName, laserSpotSize, laserSystemId, laserSystemName, laserWavelengthId, laserWavelengthName, mixingDevice, pulseWidthUnitId, pulseWidthUnitName, pulseWidthValue, standardInternal1Id, standardInternal1Name, standardInternal2Id, standardInternal2Name, standardInternal3Id, standardInternal3Name, tubingMaterialId, tubingMaterialInternalDiameterId, tubingMaterialInternalDiameterName, tubingMaterialLength, tubingMaterialName, typeAblationCellId, typeAblationCellName, washTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaserMetadataDTO {\n");
    
    sb.append("    ablationDuration: ").append(toIndentedString(ablationDuration)).append("\n");
    sb.append("    additionalGas: ").append(toIndentedString(additionalGas)).append("\n");
    sb.append("    additionalGasFlow: ").append(toIndentedString(additionalGasFlow)).append("\n");
    sb.append("    analyticalSequence: ").append(toIndentedString(analyticalSequence)).append("\n");
    sb.append("    blankDuration: ").append(toIndentedString(blankDuration)).append("\n");
    sb.append("    calibratingReferenceMaterial1Id: ").append(toIndentedString(calibratingReferenceMaterial1Id)).append("\n");
    sb.append("    calibratingReferenceMaterial1Name: ").append(toIndentedString(calibratingReferenceMaterial1Name)).append("\n");
    sb.append("    calibratingReferenceMaterial1Purpose: ").append(toIndentedString(calibratingReferenceMaterial1Purpose)).append("\n");
    sb.append("    calibratingReferenceMaterial2Id: ").append(toIndentedString(calibratingReferenceMaterial2Id)).append("\n");
    sb.append("    calibratingReferenceMaterial2Name: ").append(toIndentedString(calibratingReferenceMaterial2Name)).append("\n");
    sb.append("    calibratingReferenceMaterial2Purpose: ").append(toIndentedString(calibratingReferenceMaterial2Purpose)).append("\n");
    sb.append("    calibratingReferenceMaterial3Id: ").append(toIndentedString(calibratingReferenceMaterial3Id)).append("\n");
    sb.append("    calibratingReferenceMaterial3Name: ").append(toIndentedString(calibratingReferenceMaterial3Name)).append("\n");
    sb.append("    calibratingReferenceMaterial3Purpose: ").append(toIndentedString(calibratingReferenceMaterial3Purpose)).append("\n");
    sb.append("    calibrationStrategy: ").append(toIndentedString(calibrationStrategy)).append("\n");
    sb.append("    carrierGas: ").append(toIndentedString(carrierGas)).append("\n");
    sb.append("    carrierGasFlow: ").append(toIndentedString(carrierGasFlow)).append("\n");
    sb.append("    cellModel: ").append(toIndentedString(cellModel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icpmsmetadataId: ").append(toIndentedString(icpmsmetadataId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    laserFluence: ").append(toIndentedString(laserFluence)).append("\n");
    sb.append("    laserRepetitionRate: ").append(toIndentedString(laserRepetitionRate)).append("\n");
    sb.append("    laserSamplingModeId: ").append(toIndentedString(laserSamplingModeId)).append("\n");
    sb.append("    laserSamplingModeName: ").append(toIndentedString(laserSamplingModeName)).append("\n");
    sb.append("    laserSpotSize: ").append(toIndentedString(laserSpotSize)).append("\n");
    sb.append("    laserSystemId: ").append(toIndentedString(laserSystemId)).append("\n");
    sb.append("    laserSystemName: ").append(toIndentedString(laserSystemName)).append("\n");
    sb.append("    laserWavelengthId: ").append(toIndentedString(laserWavelengthId)).append("\n");
    sb.append("    laserWavelengthName: ").append(toIndentedString(laserWavelengthName)).append("\n");
    sb.append("    mixingDevice: ").append(toIndentedString(mixingDevice)).append("\n");
    sb.append("    pulseWidthUnitId: ").append(toIndentedString(pulseWidthUnitId)).append("\n");
    sb.append("    pulseWidthUnitName: ").append(toIndentedString(pulseWidthUnitName)).append("\n");
    sb.append("    pulseWidthValue: ").append(toIndentedString(pulseWidthValue)).append("\n");
    sb.append("    standardInternal1Id: ").append(toIndentedString(standardInternal1Id)).append("\n");
    sb.append("    standardInternal1Name: ").append(toIndentedString(standardInternal1Name)).append("\n");
    sb.append("    standardInternal2Id: ").append(toIndentedString(standardInternal2Id)).append("\n");
    sb.append("    standardInternal2Name: ").append(toIndentedString(standardInternal2Name)).append("\n");
    sb.append("    standardInternal3Id: ").append(toIndentedString(standardInternal3Id)).append("\n");
    sb.append("    standardInternal3Name: ").append(toIndentedString(standardInternal3Name)).append("\n");
    sb.append("    tubingMaterialId: ").append(toIndentedString(tubingMaterialId)).append("\n");
    sb.append("    tubingMaterialInternalDiameterId: ").append(toIndentedString(tubingMaterialInternalDiameterId)).append("\n");
    sb.append("    tubingMaterialInternalDiameterName: ").append(toIndentedString(tubingMaterialInternalDiameterName)).append("\n");
    sb.append("    tubingMaterialLength: ").append(toIndentedString(tubingMaterialLength)).append("\n");
    sb.append("    tubingMaterialName: ").append(toIndentedString(tubingMaterialName)).append("\n");
    sb.append("    typeAblationCellId: ").append(toIndentedString(typeAblationCellId)).append("\n");
    sb.append("    typeAblationCellName: ").append(toIndentedString(typeAblationCellName)).append("\n");
    sb.append("    washTime: ").append(toIndentedString(washTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

