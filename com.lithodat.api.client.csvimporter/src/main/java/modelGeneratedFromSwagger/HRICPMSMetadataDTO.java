/*
 * Lithosurfer API: Geochem model
 * Please have a look at the <a href=\"https://docs.google.com/presentation/d/1XcjHiopwNzasUvwC_7UZlkou82tfstEdqGZxqXITV3s/edit?usp=sharing\">High Level Docs</a> for getting the whole picture.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@lithosurfer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelGeneratedFromSwagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []
 */
@ApiModel(description = "@lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-07T06:47:05.458Z")
public class HRICPMSMetadataDTO {
  @SerializedName("description")
  private String description = null;

  @SerializedName("detectionSystem")
  private String detectionSystem = null;

  @SerializedName("dwellTimes")
  private String dwellTimes = null;

  @SerializedName("fastScan")
  private Boolean fastScan = null;

  @SerializedName("icpmsmetadataId")
  private Long icpmsmetadataId = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("magnetDelay")
  private Float magnetDelay = null;

  @SerializedName("massesMeasured")
  private String massesMeasured = null;

  @SerializedName("modelICPMSId")
  private Long modelICPMSId = null;

  @SerializedName("modelICPMSName")
  private String modelICPMSName = null;

  @SerializedName("nebGasFlow")
  private Float nebGasFlow = null;

  @SerializedName("numberCycles")
  private Integer numberCycles = null;

  @SerializedName("numberSweep")
  private Integer numberSweep = null;

  @SerializedName("peakCenterMass")
  private String peakCenterMass = null;

  @SerializedName("powerRF")
  private Integer powerRF = null;

  @SerializedName("resolutionMode")
  private String resolutionMode = null;

  @SerializedName("sampleIntroduction")
  private String sampleIntroduction = null;

  @SerializedName("samplerCone")
  private String samplerCone = null;

  @SerializedName("scanWindow")
  private Float scanWindow = null;

  @SerializedName("skimmerCone")
  private String skimmerCone = null;

  @SerializedName("zeroTimesIntegration")
  private Float zeroTimesIntegration = null;

  public HRICPMSMetadataDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * @lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about HR-ICP-MS analytical methods]
   * @return description
  **/
  @ApiModelProperty(value = "@lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about HR-ICP-MS analytical methods]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public HRICPMSMetadataDTO detectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
    return this;
  }

   /**
   * @lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. pulse-counting electron multiplier; attenuated pulse-counting electron multiplier; faraday)]
   * @return detectionSystem
  **/
  @ApiModelProperty(value = "@lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. pulse-counting electron multiplier; attenuated pulse-counting electron multiplier; faraday)]")
  public String getDetectionSystem() {
    return detectionSystem;
  }

  public void setDetectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
  }

  public HRICPMSMetadataDTO dwellTimes(String dwellTimes) {
    this.dwellTimes = dwellTimes;
    return this;
  }

   /**
   * @lithoLabel [Dwell Times (ms)] @lithoDocumentation [Counting time on each mass (e.g. 200 ms for each isotope; 200 ms on mass X and 100 ms on mass Y )]
   * @return dwellTimes
  **/
  @ApiModelProperty(value = "@lithoLabel [Dwell Times (ms)] @lithoDocumentation [Counting time on each mass (e.g. 200 ms for each isotope; 200 ms on mass X and 100 ms on mass Y )]")
  public String getDwellTimes() {
    return dwellTimes;
  }

  public void setDwellTimes(String dwellTimes) {
    this.dwellTimes = dwellTimes;
  }

  public HRICPMSMetadataDTO fastScan(Boolean fastScan) {
    this.fastScan = fastScan;
    return this;
  }

   /**
   * @lithoLabel [Fast Scan mode (Y/N)] @lithoDocumentation [In FastScan mode the magnet is set to a static position and ion optics deflect the beam over a limited mass range in an extremely fast and reliable manner.]
   * @return fastScan
  **/
  @ApiModelProperty(value = "@lithoLabel [Fast Scan mode (Y/N)] @lithoDocumentation [In FastScan mode the magnet is set to a static position and ion optics deflect the beam over a limited mass range in an extremely fast and reliable manner.]")
  public Boolean isFastScan() {
    return fastScan;
  }

  public void setFastScan(Boolean fastScan) {
    this.fastScan = fastScan;
  }

  public HRICPMSMetadataDTO icpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
    return this;
  }

   /**
   * Get icpmsmetadataId
   * @return icpmsmetadataId
  **/
  @ApiModelProperty(value = "")
  public Long getIcpmsmetadataId() {
    return icpmsmetadataId;
  }

  public void setIcpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
  }

  public HRICPMSMetadataDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public HRICPMSMetadataDTO magnetDelay(Float magnetDelay) {
    this.magnetDelay = magnetDelay;
    return this;
  }

   /**
   * @lithoLabel [magnet delay (s)] @lithoDocumentation [Time delay in seconds applied after each time a magnet switch occurs (usually 2 seconds)]
   * @return magnetDelay
  **/
  @ApiModelProperty(value = "@lithoLabel [magnet delay (s)] @lithoDocumentation [Time delay in seconds applied after each time a magnet switch occurs (usually 2 seconds)]")
  public Float getMagnetDelay() {
    return magnetDelay;
  }

  public void setMagnetDelay(Float magnetDelay) {
    this.magnetDelay = magnetDelay;
  }

  public HRICPMSMetadataDTO massesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
    return this;
  }

   /**
   * @lithoLabel [Masses measured] @lithoDocumentation [Masses Measured (e.g. 202–207, 235, 238).]
   * @return massesMeasured
  **/
  @ApiModelProperty(value = "@lithoLabel [Masses measured] @lithoDocumentation [Masses Measured (e.g. 202–207, 235, 238).]")
  public String getMassesMeasured() {
    return massesMeasured;
  }

  public void setMassesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
  }

  public HRICPMSMetadataDTO modelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
    return this;
  }

   /**
   * Get modelICPMSId
   * @return modelICPMSId
  **/
  @ApiModelProperty(value = "")
  public Long getModelICPMSId() {
    return modelICPMSId;
  }

  public void setModelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
  }

  public HRICPMSMetadataDTO modelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
    return this;
  }

   /**
   * Get modelICPMSName
   * @return modelICPMSName
  **/
  @ApiModelProperty(value = "")
  public String getModelICPMSName() {
    return modelICPMSName;
  }

  public void setModelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
  }

  public HRICPMSMetadataDTO nebGasFlow(Float nebGasFlow) {
    this.nebGasFlow = nebGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Nebuliser Gas Flow (l.min-1)] @lithoDocumentation [Nebuliser gas flow (l.min-1)]
   * @return nebGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Nebuliser Gas Flow (l.min-1)] @lithoDocumentation [Nebuliser gas flow (l.min-1)]")
  public Float getNebGasFlow() {
    return nebGasFlow;
  }

  public void setNebGasFlow(Float nebGasFlow) {
    this.nebGasFlow = nebGasFlow;
  }

  public HRICPMSMetadataDTO numberCycles(Integer numberCycles) {
    this.numberCycles = numberCycles;
    return this;
  }

   /**
   * @lithoLabel [Number of cycles] @lithoDocumentation [Number of sweep cycles (e.g. 10). 10 cycles of 200 sweeps equals to 4000 data sets]
   * @return numberCycles
  **/
  @ApiModelProperty(value = "@lithoLabel [Number of cycles] @lithoDocumentation [Number of sweep cycles (e.g. 10). 10 cycles of 200 sweeps equals to 4000 data sets]")
  public Integer getNumberCycles() {
    return numberCycles;
  }

  public void setNumberCycles(Integer numberCycles) {
    this.numberCycles = numberCycles;
  }

  public HRICPMSMetadataDTO numberSweep(Integer numberSweep) {
    this.numberSweep = numberSweep;
    return this;
  }

   /**
   * @lithoLabel [Number of sweep] @lithoDocumentation [Number of sweeps (e.g. 200). A sweep consists of 1 ramp up and 1 ramp down of the defined mass range, therefore 2 data sets]
   * @return numberSweep
  **/
  @ApiModelProperty(value = "@lithoLabel [Number of sweep] @lithoDocumentation [Number of sweeps (e.g. 200). A sweep consists of 1 ramp up and 1 ramp down of the defined mass range, therefore 2 data sets]")
  public Integer getNumberSweep() {
    return numberSweep;
  }

  public void setNumberSweep(Integer numberSweep) {
    this.numberSweep = numberSweep;
  }

  public HRICPMSMetadataDTO peakCenterMass(String peakCenterMass) {
    this.peakCenterMass = peakCenterMass;
    return this;
  }

   /**
   * @lithoLabel [Peak centering mass] @lithoDocumentation [Mass used to position the centre of the peaks (e.g. 180)]
   * @return peakCenterMass
  **/
  @ApiModelProperty(value = "@lithoLabel [Peak centering mass] @lithoDocumentation [Mass used to position the centre of the peaks (e.g. 180)]")
  public String getPeakCenterMass() {
    return peakCenterMass;
  }

  public void setPeakCenterMass(String peakCenterMass) {
    this.peakCenterMass = peakCenterMass;
  }

  public HRICPMSMetadataDTO powerRF(Integer powerRF) {
    this.powerRF = powerRF;
    return this;
  }

   /**
   * @lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma (typically 1000-1500 W)]
   * @return powerRF
  **/
  @ApiModelProperty(value = "@lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma (typically 1000-1500 W)]")
  public Integer getPowerRF() {
    return powerRF;
  }

  public void setPowerRF(Integer powerRF) {
    this.powerRF = powerRF;
  }

  public HRICPMSMetadataDTO resolutionMode(String resolutionMode) {
    this.resolutionMode = resolutionMode;
    return this;
  }

   /**
   * @lithoLabel [Resolution mode] @lithoDocumentation [Resolution mode used (e.g. low resolution, pseudo high resolution or high resolution; 300, 2000, 3000, 5000). Pseudo and high resolution modes are commonly used to resolve interfering isobaric peaks.]
   * @return resolutionMode
  **/
  @ApiModelProperty(value = "@lithoLabel [Resolution mode] @lithoDocumentation [Resolution mode used (e.g. low resolution, pseudo high resolution or high resolution; 300, 2000, 3000, 5000). Pseudo and high resolution modes are commonly used to resolve interfering isobaric peaks.]")
  public String getResolutionMode() {
    return resolutionMode;
  }

  public void setResolutionMode(String resolutionMode) {
    this.resolutionMode = resolutionMode;
  }

  public HRICPMSMetadataDTO sampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
    return this;
  }

   /**
   * @lithoLabel [Sample introduction details] @lithoDocumentation [Sample introduction system (e.g. Laser ablation; Solution; Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]
   * @return sampleIntroduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Sample introduction details] @lithoDocumentation [Sample introduction system (e.g. Laser ablation; Solution; Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]")
  public String getSampleIntroduction() {
    return sampleIntroduction;
  }

  public void setSampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
  }

  public HRICPMSMetadataDTO samplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
    return this;
  }

   /**
   * @lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]
   * @return samplerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]")
  public String getSamplerCone() {
    return samplerCone;
  }

  public void setSamplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
  }

  public HRICPMSMetadataDTO scanWindow(Float scanWindow) {
    this.scanWindow = scanWindow;
    return this;
  }

   /**
   * @lithoLabel [Scan Window (%)] @lithoDocumentation [Width of the scanned and integrated window of a peak (e.g. 0 &#x3D; peak top; 100% full peak width)]
   * @return scanWindow
  **/
  @ApiModelProperty(value = "@lithoLabel [Scan Window (%)] @lithoDocumentation [Width of the scanned and integrated window of a peak (e.g. 0 = peak top; 100% full peak width)]")
  public Float getScanWindow() {
    return scanWindow;
  }

  public void setScanWindow(Float scanWindow) {
    this.scanWindow = scanWindow;
  }

  public HRICPMSMetadataDTO skimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
    return this;
  }

   /**
   * @lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]
   * @return skimmerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]")
  public String getSkimmerCone() {
    return skimmerCone;
  }

  public void setSkimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
  }

  public HRICPMSMetadataDTO zeroTimesIntegration(Float zeroTimesIntegration) {
    this.zeroTimesIntegration = zeroTimesIntegration;
    return this;
  }

   /**
   * @lithoLabel [Zero integration time (s)] @lithoDocumentation [Background counting time for each zero measurement in seconds (e.g. 60 s)]
   * @return zeroTimesIntegration
  **/
  @ApiModelProperty(value = "@lithoLabel [Zero integration time (s)] @lithoDocumentation [Background counting time for each zero measurement in seconds (e.g. 60 s)]")
  public Float getZeroTimesIntegration() {
    return zeroTimesIntegration;
  }

  public void setZeroTimesIntegration(Float zeroTimesIntegration) {
    this.zeroTimesIntegration = zeroTimesIntegration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HRICPMSMetadataDTO hrICPMSMetadataDTO = (HRICPMSMetadataDTO) o;
    return Objects.equals(this.description, hrICPMSMetadataDTO.description) &&
        Objects.equals(this.detectionSystem, hrICPMSMetadataDTO.detectionSystem) &&
        Objects.equals(this.dwellTimes, hrICPMSMetadataDTO.dwellTimes) &&
        Objects.equals(this.fastScan, hrICPMSMetadataDTO.fastScan) &&
        Objects.equals(this.icpmsmetadataId, hrICPMSMetadataDTO.icpmsmetadataId) &&
        Objects.equals(this.id, hrICPMSMetadataDTO.id) &&
        Objects.equals(this.magnetDelay, hrICPMSMetadataDTO.magnetDelay) &&
        Objects.equals(this.massesMeasured, hrICPMSMetadataDTO.massesMeasured) &&
        Objects.equals(this.modelICPMSId, hrICPMSMetadataDTO.modelICPMSId) &&
        Objects.equals(this.modelICPMSName, hrICPMSMetadataDTO.modelICPMSName) &&
        Objects.equals(this.nebGasFlow, hrICPMSMetadataDTO.nebGasFlow) &&
        Objects.equals(this.numberCycles, hrICPMSMetadataDTO.numberCycles) &&
        Objects.equals(this.numberSweep, hrICPMSMetadataDTO.numberSweep) &&
        Objects.equals(this.peakCenterMass, hrICPMSMetadataDTO.peakCenterMass) &&
        Objects.equals(this.powerRF, hrICPMSMetadataDTO.powerRF) &&
        Objects.equals(this.resolutionMode, hrICPMSMetadataDTO.resolutionMode) &&
        Objects.equals(this.sampleIntroduction, hrICPMSMetadataDTO.sampleIntroduction) &&
        Objects.equals(this.samplerCone, hrICPMSMetadataDTO.samplerCone) &&
        Objects.equals(this.scanWindow, hrICPMSMetadataDTO.scanWindow) &&
        Objects.equals(this.skimmerCone, hrICPMSMetadataDTO.skimmerCone) &&
        Objects.equals(this.zeroTimesIntegration, hrICPMSMetadataDTO.zeroTimesIntegration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, detectionSystem, dwellTimes, fastScan, icpmsmetadataId, id, magnetDelay, massesMeasured, modelICPMSId, modelICPMSName, nebGasFlow, numberCycles, numberSweep, peakCenterMass, powerRF, resolutionMode, sampleIntroduction, samplerCone, scanWindow, skimmerCone, zeroTimesIntegration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HRICPMSMetadataDTO {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionSystem: ").append(toIndentedString(detectionSystem)).append("\n");
    sb.append("    dwellTimes: ").append(toIndentedString(dwellTimes)).append("\n");
    sb.append("    fastScan: ").append(toIndentedString(fastScan)).append("\n");
    sb.append("    icpmsmetadataId: ").append(toIndentedString(icpmsmetadataId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    magnetDelay: ").append(toIndentedString(magnetDelay)).append("\n");
    sb.append("    massesMeasured: ").append(toIndentedString(massesMeasured)).append("\n");
    sb.append("    modelICPMSId: ").append(toIndentedString(modelICPMSId)).append("\n");
    sb.append("    modelICPMSName: ").append(toIndentedString(modelICPMSName)).append("\n");
    sb.append("    nebGasFlow: ").append(toIndentedString(nebGasFlow)).append("\n");
    sb.append("    numberCycles: ").append(toIndentedString(numberCycles)).append("\n");
    sb.append("    numberSweep: ").append(toIndentedString(numberSweep)).append("\n");
    sb.append("    peakCenterMass: ").append(toIndentedString(peakCenterMass)).append("\n");
    sb.append("    powerRF: ").append(toIndentedString(powerRF)).append("\n");
    sb.append("    resolutionMode: ").append(toIndentedString(resolutionMode)).append("\n");
    sb.append("    sampleIntroduction: ").append(toIndentedString(sampleIntroduction)).append("\n");
    sb.append("    samplerCone: ").append(toIndentedString(samplerCone)).append("\n");
    sb.append("    scanWindow: ").append(toIndentedString(scanWindow)).append("\n");
    sb.append("    skimmerCone: ").append(toIndentedString(skimmerCone)).append("\n");
    sb.append("    zeroTimesIntegration: ").append(toIndentedString(zeroTimesIntegration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

