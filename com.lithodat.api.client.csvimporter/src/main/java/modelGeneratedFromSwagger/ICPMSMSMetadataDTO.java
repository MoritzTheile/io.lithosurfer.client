/*
 * Lithosurfer API: Geochem model
 * Please have a look at the <a href=\"https://docs.google.com/presentation/d/1XcjHiopwNzasUvwC_7UZlkou82tfstEdqGZxqXITV3s/edit?usp=sharing\">High Level Docs</a> for getting the whole picture.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@lithosurfer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelGeneratedFromSwagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []
 */
@ApiModel(description = "@lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-07T06:47:05.458Z")
public class ICPMSMSMetadataDTO {
  @SerializedName("collisionReactionCellGas")
  private String collisionReactionCellGas = null;

  @SerializedName("collisionReactionCellGasPurity")
  private String collisionReactionCellGasPurity = null;

  @SerializedName("collisionReactionGasFlow")
  private Float collisionReactionGasFlow = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("detectionSystem")
  private String detectionSystem = null;

  @SerializedName("doublychargedMonitor")
  private String doublychargedMonitor = null;

  @SerializedName("doublychargedProduction")
  private Float doublychargedProduction = null;

  @SerializedName("dwellTimes")
  private String dwellTimes = null;

  @SerializedName("icpmsmetadataId")
  private Long icpmsmetadataId = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("makeupGasFlow")
  private Float makeupGasFlow = null;

  @SerializedName("massQ1Filter")
  private String massQ1Filter = null;

  @SerializedName("massesMeasured")
  private String massesMeasured = null;

  @SerializedName("matchingRF")
  private Float matchingRF = null;

  @SerializedName("modeMSMS")
  private String modeMSMS = null;

  @SerializedName("modelICPMSId")
  private Long modelICPMSId = null;

  @SerializedName("modelICPMSName")
  private String modelICPMSName = null;

  @SerializedName("nebGasFlow")
  private Float nebGasFlow = null;

  @SerializedName("oxideMonitor")
  private String oxideMonitor = null;

  @SerializedName("oxideProduction")
  private Float oxideProduction = null;

  @SerializedName("powerRF")
  private Integer powerRF = null;

  @SerializedName("sampleIntroduction")
  private String sampleIntroduction = null;

  @SerializedName("samplerCone")
  private String samplerCone = null;

  @SerializedName("samplingDepth")
  private Float samplingDepth = null;

  @SerializedName("skimmerCone")
  private String skimmerCone = null;

  @SerializedName("waitTimeOffset")
  private Float waitTimeOffset = null;

  public ICPMSMSMetadataDTO collisionReactionCellGas(String collisionReactionCellGas) {
    this.collisionReactionCellGas = collisionReactionCellGas;
    return this;
  }

   /**
   * @lithoLabel [Collision/Reaction Cell Gas] @lithoDocumentation [Type of gas used in the MS/MS collision/reaction cell (e.g. NH3, N2O, CH4, No Gas)]
   * @return collisionReactionCellGas
  **/
  @ApiModelProperty(value = "@lithoLabel [Collision/Reaction Cell Gas] @lithoDocumentation [Type of gas used in the MS/MS collision/reaction cell (e.g. NH3, N2O, CH4, No Gas)]")
  public String getCollisionReactionCellGas() {
    return collisionReactionCellGas;
  }

  public void setCollisionReactionCellGas(String collisionReactionCellGas) {
    this.collisionReactionCellGas = collisionReactionCellGas;
  }

  public ICPMSMSMetadataDTO collisionReactionCellGasPurity(String collisionReactionCellGasPurity) {
    this.collisionReactionCellGasPurity = collisionReactionCellGasPurity;
    return this;
  }

   /**
   * @lithoLabel [Collision/Reaction Cell Gas Purity] @lithoDocumentation [Purity of the gas used in the MS/MS collision reaction cell (e.g. high purity; ultra high purity)]
   * @return collisionReactionCellGasPurity
  **/
  @ApiModelProperty(value = "@lithoLabel [Collision/Reaction Cell Gas Purity] @lithoDocumentation [Purity of the gas used in the MS/MS collision reaction cell (e.g. high purity; ultra high purity)]")
  public String getCollisionReactionCellGasPurity() {
    return collisionReactionCellGasPurity;
  }

  public void setCollisionReactionCellGasPurity(String collisionReactionCellGasPurity) {
    this.collisionReactionCellGasPurity = collisionReactionCellGasPurity;
  }

  public ICPMSMSMetadataDTO collisionReactionGasFlow(Float collisionReactionGasFlow) {
    this.collisionReactionGasFlow = collisionReactionGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Collision/Reaction Cell Gas Flow (ml.min-1)] @lithoDocumentation [Collision/reaction cell gas flow (ml.min-1); can also be expressed in sccm (standard cubic centimeter per minutes), 1 sccm &#x3D; 1 ml.min-1]
   * @return collisionReactionGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Collision/Reaction Cell Gas Flow (ml.min-1)] @lithoDocumentation [Collision/reaction cell gas flow (ml.min-1); can also be expressed in sccm (standard cubic centimeter per minutes), 1 sccm = 1 ml.min-1]")
  public Float getCollisionReactionGasFlow() {
    return collisionReactionGasFlow;
  }

  public void setCollisionReactionGasFlow(Float collisionReactionGasFlow) {
    this.collisionReactionGasFlow = collisionReactionGasFlow;
  }

  public ICPMSMSMetadataDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * @lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about ICP-MS/MS analytical methods]
   * @return description
  **/
  @ApiModelProperty(value = "@lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about ICP-MS/MS analytical methods]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ICPMSMSMetadataDTO detectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
    return this;
  }

   /**
   * @lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. electron multiplier; mixed Faraday-multiple ion counting array)]
   * @return detectionSystem
  **/
  @ApiModelProperty(value = "@lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. electron multiplier; mixed Faraday-multiple ion counting array)]")
  public String getDetectionSystem() {
    return detectionSystem;
  }

  public void setDetectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
  }

  public ICPMSMSMetadataDTO doublychargedMonitor(String doublychargedMonitor) {
    this.doublychargedMonitor = doublychargedMonitor;
    return this;
  }

   /**
   * @lithoLabel [Doubly-charged Species Monitor] @lithoDocumentation [Mass-ratio monitored to estimate doubly-charged species formation (e.g. 44Ca++/44Ca+ - 22/44)]
   * @return doublychargedMonitor
  **/
  @ApiModelProperty(value = "@lithoLabel [Doubly-charged Species Monitor] @lithoDocumentation [Mass-ratio monitored to estimate doubly-charged species formation (e.g. 44Ca++/44Ca+ - 22/44)]")
  public String getDoublychargedMonitor() {
    return doublychargedMonitor;
  }

  public void setDoublychargedMonitor(String doublychargedMonitor) {
    this.doublychargedMonitor = doublychargedMonitor;
  }

  public ICPMSMSMetadataDTO doublychargedProduction(Float doublychargedProduction) {
    this.doublychargedProduction = doublychargedProduction;
    return this;
  }

   /**
   * @lithoLabel [Doubly-charged Species Production (%)] @lithoDocumentation [Percentage of doubly-charged species formation (typically preferred to be below &gt; 1.5%)]
   * @return doublychargedProduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Doubly-charged Species Production (%)] @lithoDocumentation [Percentage of doubly-charged species formation (typically preferred to be below > 1.5%)]")
  public Float getDoublychargedProduction() {
    return doublychargedProduction;
  }

  public void setDoublychargedProduction(Float doublychargedProduction) {
    this.doublychargedProduction = doublychargedProduction;
  }

  public ICPMSMSMetadataDTO dwellTimes(String dwellTimes) {
    this.dwellTimes = dwellTimes;
    return this;
  }

   /**
   * @lithoLabel [Dwell Times (ms)] @lithoDocumentation [Counting time on each mass (e.g. 200 ms for each isotope; 200 ms on mass X and 100 ms on mass Y )]
   * @return dwellTimes
  **/
  @ApiModelProperty(value = "@lithoLabel [Dwell Times (ms)] @lithoDocumentation [Counting time on each mass (e.g. 200 ms for each isotope; 200 ms on mass X and 100 ms on mass Y )]")
  public String getDwellTimes() {
    return dwellTimes;
  }

  public void setDwellTimes(String dwellTimes) {
    this.dwellTimes = dwellTimes;
  }

  public ICPMSMSMetadataDTO icpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
    return this;
  }

   /**
   * Get icpmsmetadataId
   * @return icpmsmetadataId
  **/
  @ApiModelProperty(value = "")
  public Long getIcpmsmetadataId() {
    return icpmsmetadataId;
  }

  public void setIcpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
  }

  public ICPMSMSMetadataDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ICPMSMSMetadataDTO makeupGasFlow(Float makeupGasFlow) {
    this.makeupGasFlow = makeupGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Make-up gas flow (l.min-1)] @lithoDocumentation [Make-up gas flow (l.min-1)]
   * @return makeupGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Make-up gas flow (l.min-1)] @lithoDocumentation [Make-up gas flow (l.min-1)]")
  public Float getMakeupGasFlow() {
    return makeupGasFlow;
  }

  public void setMakeupGasFlow(Float makeupGasFlow) {
    this.makeupGasFlow = makeupGasFlow;
  }

  public ICPMSMSMetadataDTO massQ1Filter(String massQ1Filter) {
    this.massQ1Filter = massQ1Filter;
    return this;
  }

   /**
   * @lithoLabel [Q1 target masses (1st mass filter)] @lithoDocumentation [Masses scanned by the first quadrupole (Q2 filter) e.g. 46Ti, 47Ti, 48Ti, 49Ti, 50Ti]
   * @return massQ1Filter
  **/
  @ApiModelProperty(value = "@lithoLabel [Q1 target masses (1st mass filter)] @lithoDocumentation [Masses scanned by the first quadrupole (Q2 filter) e.g. 46Ti, 47Ti, 48Ti, 49Ti, 50Ti]")
  public String getMassQ1Filter() {
    return massQ1Filter;
  }

  public void setMassQ1Filter(String massQ1Filter) {
    this.massQ1Filter = massQ1Filter;
  }

  public ICPMSMSMetadataDTO massesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
    return this;
  }

   /**
   * @lithoLabel [Masses measured after Q2] @lithoDocumentation [Masses Measured after second quadrupole (Q2) e.g. 62 (46Ti16O), 63 (47Ti16O), 64 (48Ti16O), 65 (49Ti16O), 66 (50Ti16O) (if O mass-shifted)]
   * @return massesMeasured
  **/
  @ApiModelProperty(value = "@lithoLabel [Masses measured after Q2] @lithoDocumentation [Masses Measured after second quadrupole (Q2) e.g. 62 (46Ti16O), 63 (47Ti16O), 64 (48Ti16O), 65 (49Ti16O), 66 (50Ti16O) (if O mass-shifted)]")
  public String getMassesMeasured() {
    return massesMeasured;
  }

  public void setMassesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
  }

  public ICPMSMSMetadataDTO matchingRF(Float matchingRF) {
    this.matchingRF = matchingRF;
    return this;
  }

   /**
   * @lithoLabel [RF frequency matching (V)] @lithoDocumentation [RF matching compensates for changes in impedance (a material’s resistance to the flow of an electric current) produced by the sample’s matrix components or differences in solvent volatility.]
   * @return matchingRF
  **/
  @ApiModelProperty(value = "@lithoLabel [RF frequency matching (V)] @lithoDocumentation [RF matching compensates for changes in impedance (a material’s resistance to the flow of an electric current) produced by the sample’s matrix components or differences in solvent volatility.]")
  public Float getMatchingRF() {
    return matchingRF;
  }

  public void setMatchingRF(Float matchingRF) {
    this.matchingRF = matchingRF;
  }

  public ICPMSMSMetadataDTO modeMSMS(String modeMSMS) {
    this.modeMSMS = modeMSMS;
    return this;
  }

   /**
   * @lithoLabel [MS/MS Mode (On-Mass Mode vs. Mass-Shift Mode)] @lithoDocumentation [MS/MS strategy: On-mass Mode (Q1 and Q2 are both set to the same target masses; interfering ions are either filtered by collision or by mass-shifted by reaction; or instrument is used in \&quot;single quad mode\&quot; with no gas in the cell) or Mass-shift Mode (Q1 and Q2 are set to different target masses; analyte ions are mass-shifted by reaction and Q2 is set to the masses of reaction products)]
   * @return modeMSMS
  **/
  @ApiModelProperty(value = "@lithoLabel [MS/MS Mode (On-Mass Mode vs. Mass-Shift Mode)] @lithoDocumentation [MS/MS strategy: On-mass Mode (Q1 and Q2 are both set to the same target masses; interfering ions are either filtered by collision or by mass-shifted by reaction; or instrument is used in \"single quad mode\" with no gas in the cell) or Mass-shift Mode (Q1 and Q2 are set to different target masses; analyte ions are mass-shifted by reaction and Q2 is set to the masses of reaction products)]")
  public String getModeMSMS() {
    return modeMSMS;
  }

  public void setModeMSMS(String modeMSMS) {
    this.modeMSMS = modeMSMS;
  }

  public ICPMSMSMetadataDTO modelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
    return this;
  }

   /**
   * Get modelICPMSId
   * @return modelICPMSId
  **/
  @ApiModelProperty(value = "")
  public Long getModelICPMSId() {
    return modelICPMSId;
  }

  public void setModelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
  }

  public ICPMSMSMetadataDTO modelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
    return this;
  }

   /**
   * Get modelICPMSName
   * @return modelICPMSName
  **/
  @ApiModelProperty(value = "")
  public String getModelICPMSName() {
    return modelICPMSName;
  }

  public void setModelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
  }

  public ICPMSMSMetadataDTO nebGasFlow(Float nebGasFlow) {
    this.nebGasFlow = nebGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Nebuliser Gas Flow (l.min-1)] @lithoDocumentation [Nebuliser gas flow (l.min-1)]
   * @return nebGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Nebuliser Gas Flow (l.min-1)] @lithoDocumentation [Nebuliser gas flow (l.min-1)]")
  public Float getNebGasFlow() {
    return nebGasFlow;
  }

  public void setNebGasFlow(Float nebGasFlow) {
    this.nebGasFlow = nebGasFlow;
  }

  public ICPMSMSMetadataDTO oxideMonitor(String oxideMonitor) {
    this.oxideMonitor = oxideMonitor;
    return this;
  }

   /**
   * @lithoLabel [Oxide monitor] @lithoDocumentation [Mass-ratio monitored to estimate oxide formation (e.g. 248ThO+/232Th+)]
   * @return oxideMonitor
  **/
  @ApiModelProperty(value = "@lithoLabel [Oxide monitor] @lithoDocumentation [Mass-ratio monitored to estimate oxide formation (e.g. 248ThO+/232Th+)]")
  public String getOxideMonitor() {
    return oxideMonitor;
  }

  public void setOxideMonitor(String oxideMonitor) {
    this.oxideMonitor = oxideMonitor;
  }

  public ICPMSMSMetadataDTO oxideProduction(Float oxideProduction) {
    this.oxideProduction = oxideProduction;
    return this;
  }

   /**
   * @lithoLabel [Oxide Production (%)] @lithoDocumentation [Percentage of oxide formation (typically preferred to be below &gt; 1%)]
   * @return oxideProduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Oxide Production (%)] @lithoDocumentation [Percentage of oxide formation (typically preferred to be below > 1%)]")
  public Float getOxideProduction() {
    return oxideProduction;
  }

  public void setOxideProduction(Float oxideProduction) {
    this.oxideProduction = oxideProduction;
  }

  public ICPMSMSMetadataDTO powerRF(Integer powerRF) {
    this.powerRF = powerRF;
    return this;
  }

   /**
   * @lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma (typically 1000-1500 W)]
   * @return powerRF
  **/
  @ApiModelProperty(value = "@lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma (typically 1000-1500 W)]")
  public Integer getPowerRF() {
    return powerRF;
  }

  public void setPowerRF(Integer powerRF) {
    this.powerRF = powerRF;
  }

  public ICPMSMSMetadataDTO sampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
    return this;
  }

   /**
   * @lithoLabel [Sample introduction details] @lithoDocumentation [Details of the sample ample introduction system (e.g. Laser ablation; Solution; Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]
   * @return sampleIntroduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Sample introduction details] @lithoDocumentation [Details of the sample ample introduction system (e.g. Laser ablation; Solution; Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]")
  public String getSampleIntroduction() {
    return sampleIntroduction;
  }

  public void setSampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
  }

  public ICPMSMSMetadataDTO samplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
    return this;
  }

   /**
   * @lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]
   * @return samplerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]")
  public String getSamplerCone() {
    return samplerCone;
  }

  public void setSamplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
  }

  public ICPMSMSMetadataDTO samplingDepth(Float samplingDepth) {
    this.samplingDepth = samplingDepth;
    return this;
  }

   /**
   * @lithoLabel [Sampling Depth (mm)] @lithoDocumentation [Distance in mm between coil and sampling cone]
   * @return samplingDepth
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampling Depth (mm)] @lithoDocumentation [Distance in mm between coil and sampling cone]")
  public Float getSamplingDepth() {
    return samplingDepth;
  }

  public void setSamplingDepth(Float samplingDepth) {
    this.samplingDepth = samplingDepth;
  }

  public ICPMSMSMetadataDTO skimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
    return this;
  }

   /**
   * @lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]
   * @return skimmerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]")
  public String getSkimmerCone() {
    return skimmerCone;
  }

  public void setSkimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
  }

  public ICPMSMSMetadataDTO waitTimeOffset(Float waitTimeOffset) {
    this.waitTimeOffset = waitTimeOffset;
    return this;
  }

   /**
   * @lithoLabel [Wait time offset] @lithoDocumentation [The Wait Time Offset is a delay in ms (e.g. 2 ms) implemented to slightly dephased the scanning of Q2 relative to Q1 in order to compensate for the slowdown of the ions in the cell due to the collision/reaction process]
   * @return waitTimeOffset
  **/
  @ApiModelProperty(value = "@lithoLabel [Wait time offset] @lithoDocumentation [The Wait Time Offset is a delay in ms (e.g. 2 ms) implemented to slightly dephased the scanning of Q2 relative to Q1 in order to compensate for the slowdown of the ions in the cell due to the collision/reaction process]")
  public Float getWaitTimeOffset() {
    return waitTimeOffset;
  }

  public void setWaitTimeOffset(Float waitTimeOffset) {
    this.waitTimeOffset = waitTimeOffset;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICPMSMSMetadataDTO icPMSMSMetadataDTO = (ICPMSMSMetadataDTO) o;
    return Objects.equals(this.collisionReactionCellGas, icPMSMSMetadataDTO.collisionReactionCellGas) &&
        Objects.equals(this.collisionReactionCellGasPurity, icPMSMSMetadataDTO.collisionReactionCellGasPurity) &&
        Objects.equals(this.collisionReactionGasFlow, icPMSMSMetadataDTO.collisionReactionGasFlow) &&
        Objects.equals(this.description, icPMSMSMetadataDTO.description) &&
        Objects.equals(this.detectionSystem, icPMSMSMetadataDTO.detectionSystem) &&
        Objects.equals(this.doublychargedMonitor, icPMSMSMetadataDTO.doublychargedMonitor) &&
        Objects.equals(this.doublychargedProduction, icPMSMSMetadataDTO.doublychargedProduction) &&
        Objects.equals(this.dwellTimes, icPMSMSMetadataDTO.dwellTimes) &&
        Objects.equals(this.icpmsmetadataId, icPMSMSMetadataDTO.icpmsmetadataId) &&
        Objects.equals(this.id, icPMSMSMetadataDTO.id) &&
        Objects.equals(this.makeupGasFlow, icPMSMSMetadataDTO.makeupGasFlow) &&
        Objects.equals(this.massQ1Filter, icPMSMSMetadataDTO.massQ1Filter) &&
        Objects.equals(this.massesMeasured, icPMSMSMetadataDTO.massesMeasured) &&
        Objects.equals(this.matchingRF, icPMSMSMetadataDTO.matchingRF) &&
        Objects.equals(this.modeMSMS, icPMSMSMetadataDTO.modeMSMS) &&
        Objects.equals(this.modelICPMSId, icPMSMSMetadataDTO.modelICPMSId) &&
        Objects.equals(this.modelICPMSName, icPMSMSMetadataDTO.modelICPMSName) &&
        Objects.equals(this.nebGasFlow, icPMSMSMetadataDTO.nebGasFlow) &&
        Objects.equals(this.oxideMonitor, icPMSMSMetadataDTO.oxideMonitor) &&
        Objects.equals(this.oxideProduction, icPMSMSMetadataDTO.oxideProduction) &&
        Objects.equals(this.powerRF, icPMSMSMetadataDTO.powerRF) &&
        Objects.equals(this.sampleIntroduction, icPMSMSMetadataDTO.sampleIntroduction) &&
        Objects.equals(this.samplerCone, icPMSMSMetadataDTO.samplerCone) &&
        Objects.equals(this.samplingDepth, icPMSMSMetadataDTO.samplingDepth) &&
        Objects.equals(this.skimmerCone, icPMSMSMetadataDTO.skimmerCone) &&
        Objects.equals(this.waitTimeOffset, icPMSMSMetadataDTO.waitTimeOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collisionReactionCellGas, collisionReactionCellGasPurity, collisionReactionGasFlow, description, detectionSystem, doublychargedMonitor, doublychargedProduction, dwellTimes, icpmsmetadataId, id, makeupGasFlow, massQ1Filter, massesMeasured, matchingRF, modeMSMS, modelICPMSId, modelICPMSName, nebGasFlow, oxideMonitor, oxideProduction, powerRF, sampleIntroduction, samplerCone, samplingDepth, skimmerCone, waitTimeOffset);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICPMSMSMetadataDTO {\n");
    
    sb.append("    collisionReactionCellGas: ").append(toIndentedString(collisionReactionCellGas)).append("\n");
    sb.append("    collisionReactionCellGasPurity: ").append(toIndentedString(collisionReactionCellGasPurity)).append("\n");
    sb.append("    collisionReactionGasFlow: ").append(toIndentedString(collisionReactionGasFlow)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionSystem: ").append(toIndentedString(detectionSystem)).append("\n");
    sb.append("    doublychargedMonitor: ").append(toIndentedString(doublychargedMonitor)).append("\n");
    sb.append("    doublychargedProduction: ").append(toIndentedString(doublychargedProduction)).append("\n");
    sb.append("    dwellTimes: ").append(toIndentedString(dwellTimes)).append("\n");
    sb.append("    icpmsmetadataId: ").append(toIndentedString(icpmsmetadataId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    makeupGasFlow: ").append(toIndentedString(makeupGasFlow)).append("\n");
    sb.append("    massQ1Filter: ").append(toIndentedString(massQ1Filter)).append("\n");
    sb.append("    massesMeasured: ").append(toIndentedString(massesMeasured)).append("\n");
    sb.append("    matchingRF: ").append(toIndentedString(matchingRF)).append("\n");
    sb.append("    modeMSMS: ").append(toIndentedString(modeMSMS)).append("\n");
    sb.append("    modelICPMSId: ").append(toIndentedString(modelICPMSId)).append("\n");
    sb.append("    modelICPMSName: ").append(toIndentedString(modelICPMSName)).append("\n");
    sb.append("    nebGasFlow: ").append(toIndentedString(nebGasFlow)).append("\n");
    sb.append("    oxideMonitor: ").append(toIndentedString(oxideMonitor)).append("\n");
    sb.append("    oxideProduction: ").append(toIndentedString(oxideProduction)).append("\n");
    sb.append("    powerRF: ").append(toIndentedString(powerRF)).append("\n");
    sb.append("    sampleIntroduction: ").append(toIndentedString(sampleIntroduction)).append("\n");
    sb.append("    samplerCone: ").append(toIndentedString(samplerCone)).append("\n");
    sb.append("    samplingDepth: ").append(toIndentedString(samplingDepth)).append("\n");
    sb.append("    skimmerCone: ").append(toIndentedString(skimmerCone)).append("\n");
    sb.append("    waitTimeOffset: ").append(toIndentedString(waitTimeOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

