/*
 * Lithosurfer API: Geochem model
 * Please have a look at the <a href=\"https://docs.google.com/presentation/d/1XcjHiopwNzasUvwC_7UZlkou82tfstEdqGZxqXITV3s/edit?usp=sharing\">High Level Docs</a> for getting the whole picture.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@lithosurfer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelGeneratedFromSwagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []
 */
@ApiModel(description = "@lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-07T06:47:05.458Z")
public class MCICPMSMetadataDTO {
  @SerializedName("deltaM")
  private String deltaM = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("detectionSystem")
  private String detectionSystem = null;

  @SerializedName("icpmsmetadataId")
  private Long icpmsmetadataId = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("magnetDelay")
  private Float magnetDelay = null;

  @SerializedName("massesMeasured")
  private String massesMeasured = null;

  @SerializedName("modelICPMSId")
  private Long modelICPMSId = null;

  @SerializedName("modelICPMSName")
  private String modelICPMSName = null;

  @SerializedName("numberBlock")
  private Integer numberBlock = null;

  @SerializedName("numberMeasureBlock")
  private Integer numberMeasureBlock = null;

  @SerializedName("peakCenterMass")
  private String peakCenterMass = null;

  @SerializedName("powerRF")
  private Integer powerRF = null;

  @SerializedName("resolutionMode")
  private String resolutionMode = null;

  @SerializedName("sampleIntroduction")
  private String sampleIntroduction = null;

  @SerializedName("samplerCone")
  private String samplerCone = null;

  @SerializedName("skimmerCone")
  private String skimmerCone = null;

  @SerializedName("timesIntegration")
  private Float timesIntegration = null;

  @SerializedName("zeroTimesIntegration")
  private Float zeroTimesIntegration = null;

  public MCICPMSMetadataDTO deltaM(String deltaM) {
    this.deltaM = deltaM;
    return this;
  }

   /**
   * @lithoLabel [Delta M (HR mode only)] @lithoDocumentation [Delta M in a.m.u. When resolving isobaric interferences in High Resolution mode, a precise and constant mass offset (delta M) can be applied to the main body of a peak in order to locate lower interference-free peak edges. Main peak (interfered) is identified by instrument and Delta M is added or removed from it, allowing magnet to be centrered on the interference-free edge of an isotope of choice during analysis (e.g.  57Fe overlapped by 17O + 40Ar; Main body of peak is 17O + 40 Ar at 56.978 and 57Fe shoulder is located at 56.966 and therefore a Delta M of 0.0126 a.m.u.)]
   * @return deltaM
  **/
  @ApiModelProperty(value = "@lithoLabel [Delta M (HR mode only)] @lithoDocumentation [Delta M in a.m.u. When resolving isobaric interferences in High Resolution mode, a precise and constant mass offset (delta M) can be applied to the main body of a peak in order to locate lower interference-free peak edges. Main peak (interfered) is identified by instrument and Delta M is added or removed from it, allowing magnet to be centrered on the interference-free edge of an isotope of choice during analysis (e.g.  57Fe overlapped by 17O + 40Ar; Main body of peak is 17O + 40 Ar at 56.978 and 57Fe shoulder is located at 56.966 and therefore a Delta M of 0.0126 a.m.u.)]")
  public String getDeltaM() {
    return deltaM;
  }

  public void setDeltaM(String deltaM) {
    this.deltaM = deltaM;
  }

  public MCICPMSMetadataDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * @lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about MC-ICP-MS analytical methods]
   * @return description
  **/
  @ApiModelProperty(value = "@lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about MC-ICP-MS analytical methods]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public MCICPMSMetadataDTO detectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
    return this;
  }

   /**
   * @lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. electron multiplier; mixed: Faradays and ion counters)]
   * @return detectionSystem
  **/
  @ApiModelProperty(value = "@lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. electron multiplier; mixed: Faradays and ion counters)]")
  public String getDetectionSystem() {
    return detectionSystem;
  }

  public void setDetectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
  }

  public MCICPMSMetadataDTO icpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
    return this;
  }

   /**
   * Get icpmsmetadataId
   * @return icpmsmetadataId
  **/
  @ApiModelProperty(value = "")
  public Long getIcpmsmetadataId() {
    return icpmsmetadataId;
  }

  public void setIcpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
  }

  public MCICPMSMetadataDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public MCICPMSMetadataDTO magnetDelay(Float magnetDelay) {
    this.magnetDelay = magnetDelay;
    return this;
  }

   /**
   * @lithoLabel [magnet delay (s)] @lithoDocumentation [Time delay in seconds applied after each time a magnet switch occurs (usually 2 seconds)]
   * @return magnetDelay
  **/
  @ApiModelProperty(value = "@lithoLabel [magnet delay (s)] @lithoDocumentation [Time delay in seconds applied after each time a magnet switch occurs (usually 2 seconds)]")
  public Float getMagnetDelay() {
    return magnetDelay;
  }

  public void setMagnetDelay(Float magnetDelay) {
    this.magnetDelay = magnetDelay;
  }

  public MCICPMSMetadataDTO massesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
    return this;
  }

   /**
   * @lithoLabel [Masses measured] @lithoDocumentation [Masses Measured (e.g. 202–207, 235, 238). If not a static mode and multiple \&quot;magnet\&quot; cycles are implemented, do precise the number of cycles and masses measured in each cycle (e.g. cycle #1: 202, 204, 206, 207, 208; cycle #2: 232, 234, 235, 238)]
   * @return massesMeasured
  **/
  @ApiModelProperty(value = "@lithoLabel [Masses measured] @lithoDocumentation [Masses Measured (e.g. 202–207, 235, 238). If not a static mode and multiple \"magnet\" cycles are implemented, do precise the number of cycles and masses measured in each cycle (e.g. cycle #1: 202, 204, 206, 207, 208; cycle #2: 232, 234, 235, 238)]")
  public String getMassesMeasured() {
    return massesMeasured;
  }

  public void setMassesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
  }

  public MCICPMSMetadataDTO modelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
    return this;
  }

   /**
   * Get modelICPMSId
   * @return modelICPMSId
  **/
  @ApiModelProperty(value = "")
  public Long getModelICPMSId() {
    return modelICPMSId;
  }

  public void setModelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
  }

  public MCICPMSMetadataDTO modelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
    return this;
  }

   /**
   * Get modelICPMSName
   * @return modelICPMSName
  **/
  @ApiModelProperty(value = "")
  public String getModelICPMSName() {
    return modelICPMSName;
  }

  public void setModelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
  }

  public MCICPMSMetadataDTO numberBlock(Integer numberBlock) {
    this.numberBlock = numberBlock;
    return this;
  }

   /**
   * @lithoLabel [number of block (solution mode only)] @lithoDocumentation [Number of blocks of measurements (e.g. 2)]
   * @return numberBlock
  **/
  @ApiModelProperty(value = "@lithoLabel [number of block (solution mode only)] @lithoDocumentation [Number of blocks of measurements (e.g. 2)]")
  public Integer getNumberBlock() {
    return numberBlock;
  }

  public void setNumberBlock(Integer numberBlock) {
    this.numberBlock = numberBlock;
  }

  public MCICPMSMetadataDTO numberMeasureBlock(Integer numberMeasureBlock) {
    this.numberMeasureBlock = numberMeasureBlock;
    return this;
  }

   /**
   * @lithoLabel [number of measurements per block (solution mode only)] @lithoDocumentation [Number of measurement per blocks (e.g. 25; 2 blocks and 25 measurements per block give 50 measurements per analysis )]
   * @return numberMeasureBlock
  **/
  @ApiModelProperty(value = "@lithoLabel [number of measurements per block (solution mode only)] @lithoDocumentation [Number of measurement per blocks (e.g. 25; 2 blocks and 25 measurements per block give 50 measurements per analysis )]")
  public Integer getNumberMeasureBlock() {
    return numberMeasureBlock;
  }

  public void setNumberMeasureBlock(Integer numberMeasureBlock) {
    this.numberMeasureBlock = numberMeasureBlock;
  }

  public MCICPMSMetadataDTO peakCenterMass(String peakCenterMass) {
    this.peakCenterMass = peakCenterMass;
    return this;
  }

   /**
   * @lithoLabel [Peak centering mass] @lithoDocumentation [Mass used to position the centre of the peaks (e.g. 180)]
   * @return peakCenterMass
  **/
  @ApiModelProperty(value = "@lithoLabel [Peak centering mass] @lithoDocumentation [Mass used to position the centre of the peaks (e.g. 180)]")
  public String getPeakCenterMass() {
    return peakCenterMass;
  }

  public void setPeakCenterMass(String peakCenterMass) {
    this.peakCenterMass = peakCenterMass;
  }

  public MCICPMSMetadataDTO powerRF(Integer powerRF) {
    this.powerRF = powerRF;
    return this;
  }

   /**
   * @lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma(typically 1000-1500 W)]
   * @return powerRF
  **/
  @ApiModelProperty(value = "@lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma(typically 1000-1500 W)]")
  public Integer getPowerRF() {
    return powerRF;
  }

  public void setPowerRF(Integer powerRF) {
    this.powerRF = powerRF;
  }

  public MCICPMSMetadataDTO resolutionMode(String resolutionMode) {
    this.resolutionMode = resolutionMode;
    return this;
  }

   /**
   * @lithoLabel [Resolution mode] @lithoDocumentation [Resolution mode used (e.g. low resolution, pseudo high resolution or high resolution). Pseudo and high resolution modes are commonly used to resolve interfering isobaric peaks.]
   * @return resolutionMode
  **/
  @ApiModelProperty(value = "@lithoLabel [Resolution mode] @lithoDocumentation [Resolution mode used (e.g. low resolution, pseudo high resolution or high resolution). Pseudo and high resolution modes are commonly used to resolve interfering isobaric peaks.]")
  public String getResolutionMode() {
    return resolutionMode;
  }

  public void setResolutionMode(String resolutionMode) {
    this.resolutionMode = resolutionMode;
  }

  public MCICPMSMetadataDTO sampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
    return this;
  }

   /**
   * @lithoLabel [Sample introduction details] @lithoDocumentation [Sample introduction system (e.g. Laser ablation; Solution;  Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]
   * @return sampleIntroduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Sample introduction details] @lithoDocumentation [Sample introduction system (e.g. Laser ablation; Solution;  Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]")
  public String getSampleIntroduction() {
    return sampleIntroduction;
  }

  public void setSampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
  }

  public MCICPMSMetadataDTO samplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
    return this;
  }

   /**
   * @lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]
   * @return samplerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]")
  public String getSamplerCone() {
    return samplerCone;
  }

  public void setSamplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
  }

  public MCICPMSMetadataDTO skimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
    return this;
  }

   /**
   * @lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]
   * @return skimmerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]")
  public String getSkimmerCone() {
    return skimmerCone;
  }

  public void setSkimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
  }

  public MCICPMSMetadataDTO timesIntegration(Float timesIntegration) {
    this.timesIntegration = timesIntegration;
    return this;
  }

   /**
   * @lithoLabel [Integration times (s)] @lithoDocumentation [Beam counting time for each measurement in seconds (e.g. 10 s)]
   * @return timesIntegration
  **/
  @ApiModelProperty(value = "@lithoLabel [Integration times (s)] @lithoDocumentation [Beam counting time for each measurement in seconds (e.g. 10 s)]")
  public Float getTimesIntegration() {
    return timesIntegration;
  }

  public void setTimesIntegration(Float timesIntegration) {
    this.timesIntegration = timesIntegration;
  }

  public MCICPMSMetadataDTO zeroTimesIntegration(Float zeroTimesIntegration) {
    this.zeroTimesIntegration = zeroTimesIntegration;
    return this;
  }

   /**
   * @lithoLabel [Zero integration time (s)] @lithoDocumentation [Background counting time for each zero measurement in seconds (e.g. 60 s)]
   * @return zeroTimesIntegration
  **/
  @ApiModelProperty(value = "@lithoLabel [Zero integration time (s)] @lithoDocumentation [Background counting time for each zero measurement in seconds (e.g. 60 s)]")
  public Float getZeroTimesIntegration() {
    return zeroTimesIntegration;
  }

  public void setZeroTimesIntegration(Float zeroTimesIntegration) {
    this.zeroTimesIntegration = zeroTimesIntegration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MCICPMSMetadataDTO mcICPMSMetadataDTO = (MCICPMSMetadataDTO) o;
    return Objects.equals(this.deltaM, mcICPMSMetadataDTO.deltaM) &&
        Objects.equals(this.description, mcICPMSMetadataDTO.description) &&
        Objects.equals(this.detectionSystem, mcICPMSMetadataDTO.detectionSystem) &&
        Objects.equals(this.icpmsmetadataId, mcICPMSMetadataDTO.icpmsmetadataId) &&
        Objects.equals(this.id, mcICPMSMetadataDTO.id) &&
        Objects.equals(this.magnetDelay, mcICPMSMetadataDTO.magnetDelay) &&
        Objects.equals(this.massesMeasured, mcICPMSMetadataDTO.massesMeasured) &&
        Objects.equals(this.modelICPMSId, mcICPMSMetadataDTO.modelICPMSId) &&
        Objects.equals(this.modelICPMSName, mcICPMSMetadataDTO.modelICPMSName) &&
        Objects.equals(this.numberBlock, mcICPMSMetadataDTO.numberBlock) &&
        Objects.equals(this.numberMeasureBlock, mcICPMSMetadataDTO.numberMeasureBlock) &&
        Objects.equals(this.peakCenterMass, mcICPMSMetadataDTO.peakCenterMass) &&
        Objects.equals(this.powerRF, mcICPMSMetadataDTO.powerRF) &&
        Objects.equals(this.resolutionMode, mcICPMSMetadataDTO.resolutionMode) &&
        Objects.equals(this.sampleIntroduction, mcICPMSMetadataDTO.sampleIntroduction) &&
        Objects.equals(this.samplerCone, mcICPMSMetadataDTO.samplerCone) &&
        Objects.equals(this.skimmerCone, mcICPMSMetadataDTO.skimmerCone) &&
        Objects.equals(this.timesIntegration, mcICPMSMetadataDTO.timesIntegration) &&
        Objects.equals(this.zeroTimesIntegration, mcICPMSMetadataDTO.zeroTimesIntegration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deltaM, description, detectionSystem, icpmsmetadataId, id, magnetDelay, massesMeasured, modelICPMSId, modelICPMSName, numberBlock, numberMeasureBlock, peakCenterMass, powerRF, resolutionMode, sampleIntroduction, samplerCone, skimmerCone, timesIntegration, zeroTimesIntegration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MCICPMSMetadataDTO {\n");
    
    sb.append("    deltaM: ").append(toIndentedString(deltaM)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionSystem: ").append(toIndentedString(detectionSystem)).append("\n");
    sb.append("    icpmsmetadataId: ").append(toIndentedString(icpmsmetadataId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    magnetDelay: ").append(toIndentedString(magnetDelay)).append("\n");
    sb.append("    massesMeasured: ").append(toIndentedString(massesMeasured)).append("\n");
    sb.append("    modelICPMSId: ").append(toIndentedString(modelICPMSId)).append("\n");
    sb.append("    modelICPMSName: ").append(toIndentedString(modelICPMSName)).append("\n");
    sb.append("    numberBlock: ").append(toIndentedString(numberBlock)).append("\n");
    sb.append("    numberMeasureBlock: ").append(toIndentedString(numberMeasureBlock)).append("\n");
    sb.append("    peakCenterMass: ").append(toIndentedString(peakCenterMass)).append("\n");
    sb.append("    powerRF: ").append(toIndentedString(powerRF)).append("\n");
    sb.append("    resolutionMode: ").append(toIndentedString(resolutionMode)).append("\n");
    sb.append("    sampleIntroduction: ").append(toIndentedString(sampleIntroduction)).append("\n");
    sb.append("    samplerCone: ").append(toIndentedString(samplerCone)).append("\n");
    sb.append("    skimmerCone: ").append(toIndentedString(skimmerCone)).append("\n");
    sb.append("    timesIntegration: ").append(toIndentedString(timesIntegration)).append("\n");
    sb.append("    zeroTimesIntegration: ").append(toIndentedString(zeroTimesIntegration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

