/*
 * Lithosurfer API: Geochem model
 * Please have a look at the <a href=\"https://docs.google.com/presentation/d/1XcjHiopwNzasUvwC_7UZlkou82tfstEdqGZxqXITV3s/edit?usp=sharing\">High Level Docs</a> for getting the whole picture.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@lithosurfer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelGeneratedFromSwagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The root of the ICPMS model. @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [DataPoint] @lithoLabel [ICPMS metadata] @lithoDocumentation [The ICPMS metadata connects to a DataPoint and can be used by specific DataPoints.]
 */
@ApiModel(description = "The root of the ICPMS model. @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [DataPoint] @lithoLabel [ICPMS metadata] @lithoDocumentation [The ICPMS metadata connects to a DataPoint and can be used by specific DataPoints.]")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-07T06:47:05.458Z")
public class ICPMSMetadataDTO {
  @SerializedName("analyticalSessionID")
  private String analyticalSessionID = null;

  @SerializedName("batchID")
  private String batchID = null;

  @SerializedName("combinedMeasurementId")
  private Long combinedMeasurementId = null;

  @SerializedName("combinedMeasurementName")
  private String combinedMeasurementName = null;

  @SerializedName("dataPointId")
  private Long dataPointId = null;

  @SerializedName("dataReductionPackageId")
  private Long dataReductionPackageId = null;

  @SerializedName("dataReductionPackageName")
  private String dataReductionPackageName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("sampleIntroMethodId")
  private Long sampleIntroMethodId = null;

  @SerializedName("sampleIntroMethodName")
  private String sampleIntroMethodName = null;

  @SerializedName("typeICPMSId")
  private Long typeICPMSId = null;

  @SerializedName("typeICPMSName")
  private String typeICPMSName = null;

  public ICPMSMetadataDTO analyticalSessionID(String analyticalSessionID) {
    this.analyticalSessionID = analyticalSessionID;
    return this;
  }

   /**
   * @lithoLabel [Analytical Session ID] @lithoDocumentation [A unique identifier of a session to answer a scientific question.]
   * @return analyticalSessionID
  **/
  @ApiModelProperty(value = "@lithoLabel [Analytical Session ID] @lithoDocumentation [A unique identifier of a session to answer a scientific question.]")
  public String getAnalyticalSessionID() {
    return analyticalSessionID;
  }

  public void setAnalyticalSessionID(String analyticalSessionID) {
    this.analyticalSessionID = analyticalSessionID;
  }

  public ICPMSMetadataDTO batchID(String batchID) {
    this.batchID = batchID;
    return this;
  }

   /**
   * @lithoLabel [Batch ID] @lithoDocumentation [A unique identifier of a specific machine run. E.g. used to link unknown analyses to in-batch secondary reference material values]
   * @return batchID
  **/
  @ApiModelProperty(value = "@lithoLabel [Batch ID] @lithoDocumentation [A unique identifier of a specific machine run. E.g. used to link unknown analyses to in-batch secondary reference material values]")
  public String getBatchID() {
    return batchID;
  }

  public void setBatchID(String batchID) {
    this.batchID = batchID;
  }

  public ICPMSMetadataDTO combinedMeasurementId(Long combinedMeasurementId) {
    this.combinedMeasurementId = combinedMeasurementId;
    return this;
  }

   /**
   * @lithoLabel [Combined Measurement] @lithoDocumentation [Supplementary measurement performed simultaneously to current analytical model (e.g. U-Pb + Lu-Hf split streams; TE + U-Pb)]
   * @return combinedMeasurementId
  **/
  @ApiModelProperty(value = "@lithoLabel [Combined Measurement] @lithoDocumentation [Supplementary measurement performed simultaneously to current analytical model (e.g. U-Pb + Lu-Hf split streams; TE + U-Pb)]")
  public Long getCombinedMeasurementId() {
    return combinedMeasurementId;
  }

  public void setCombinedMeasurementId(Long combinedMeasurementId) {
    this.combinedMeasurementId = combinedMeasurementId;
  }

  public ICPMSMetadataDTO combinedMeasurementName(String combinedMeasurementName) {
    this.combinedMeasurementName = combinedMeasurementName;
    return this;
  }

   /**
   * Get combinedMeasurementName
   * @return combinedMeasurementName
  **/
  @ApiModelProperty(value = "")
  public String getCombinedMeasurementName() {
    return combinedMeasurementName;
  }

  public void setCombinedMeasurementName(String combinedMeasurementName) {
    this.combinedMeasurementName = combinedMeasurementName;
  }

  public ICPMSMetadataDTO dataPointId(Long dataPointId) {
    this.dataPointId = dataPointId;
    return this;
  }

   /**
   * with jpaDerivedIdentifier @lithoLabel [] @lithoDocumentation []
   * @return dataPointId
  **/
  @ApiModelProperty(value = "with jpaDerivedIdentifier @lithoLabel [] @lithoDocumentation []")
  public Long getDataPointId() {
    return dataPointId;
  }

  public void setDataPointId(Long dataPointId) {
    this.dataPointId = dataPointId;
  }

  public ICPMSMetadataDTO dataReductionPackageId(Long dataReductionPackageId) {
    this.dataReductionPackageId = dataReductionPackageId;
    return this;
  }

   /**
   * @lithoLabel [Data Reduction package] @lithoDocumentation [Data Reduction package (e.g. Iolite, Glitter)]
   * @return dataReductionPackageId
  **/
  @ApiModelProperty(value = "@lithoLabel [Data Reduction package] @lithoDocumentation [Data Reduction package (e.g. Iolite, Glitter)]")
  public Long getDataReductionPackageId() {
    return dataReductionPackageId;
  }

  public void setDataReductionPackageId(Long dataReductionPackageId) {
    this.dataReductionPackageId = dataReductionPackageId;
  }

  public ICPMSMetadataDTO dataReductionPackageName(String dataReductionPackageName) {
    this.dataReductionPackageName = dataReductionPackageName;
    return this;
  }

   /**
   * Get dataReductionPackageName
   * @return dataReductionPackageName
  **/
  @ApiModelProperty(value = "")
  public String getDataReductionPackageName() {
    return dataReductionPackageName;
  }

  public void setDataReductionPackageName(String dataReductionPackageName) {
    this.dataReductionPackageName = dataReductionPackageName;
  }

  public ICPMSMetadataDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * @lithoLabel [Comments] @lithoDocumentation [Additional information and comments about the settings used.]
   * @return description
  **/
  @ApiModelProperty(value = "@lithoLabel [Comments] @lithoDocumentation [Additional information and comments about the settings used.]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ICPMSMetadataDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ICPMSMetadataDTO sampleIntroMethodId(Long sampleIntroMethodId) {
    this.sampleIntroMethodId = sampleIntroMethodId;
    return this;
  }

   /**
   * @lithoLabel [Sample Introduction Method] @lithoDocumentation [Sample Introduction Method (e.g. solution, laser ablation)]
   * @return sampleIntroMethodId
  **/
  @ApiModelProperty(value = "@lithoLabel [Sample Introduction Method] @lithoDocumentation [Sample Introduction Method (e.g. solution, laser ablation)]")
  public Long getSampleIntroMethodId() {
    return sampleIntroMethodId;
  }

  public void setSampleIntroMethodId(Long sampleIntroMethodId) {
    this.sampleIntroMethodId = sampleIntroMethodId;
  }

  public ICPMSMetadataDTO sampleIntroMethodName(String sampleIntroMethodName) {
    this.sampleIntroMethodName = sampleIntroMethodName;
    return this;
  }

   /**
   * Get sampleIntroMethodName
   * @return sampleIntroMethodName
  **/
  @ApiModelProperty(value = "")
  public String getSampleIntroMethodName() {
    return sampleIntroMethodName;
  }

  public void setSampleIntroMethodName(String sampleIntroMethodName) {
    this.sampleIntroMethodName = sampleIntroMethodName;
  }

  public ICPMSMetadataDTO typeICPMSId(Long typeICPMSId) {
    this.typeICPMSId = typeICPMSId;
    return this;
  }

   /**
   * @lithoLabel [ICP-MS type] @lithoDocumentation [Type of ICP-MS mass-spectrometer]
   * @return typeICPMSId
  **/
  @ApiModelProperty(value = "@lithoLabel [ICP-MS type] @lithoDocumentation [Type of ICP-MS mass-spectrometer]")
  public Long getTypeICPMSId() {
    return typeICPMSId;
  }

  public void setTypeICPMSId(Long typeICPMSId) {
    this.typeICPMSId = typeICPMSId;
  }

  public ICPMSMetadataDTO typeICPMSName(String typeICPMSName) {
    this.typeICPMSName = typeICPMSName;
    return this;
  }

   /**
   * Get typeICPMSName
   * @return typeICPMSName
  **/
  @ApiModelProperty(value = "")
  public String getTypeICPMSName() {
    return typeICPMSName;
  }

  public void setTypeICPMSName(String typeICPMSName) {
    this.typeICPMSName = typeICPMSName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICPMSMetadataDTO icPMSMetadataDTO = (ICPMSMetadataDTO) o;
    return Objects.equals(this.analyticalSessionID, icPMSMetadataDTO.analyticalSessionID) &&
        Objects.equals(this.batchID, icPMSMetadataDTO.batchID) &&
        Objects.equals(this.combinedMeasurementId, icPMSMetadataDTO.combinedMeasurementId) &&
        Objects.equals(this.combinedMeasurementName, icPMSMetadataDTO.combinedMeasurementName) &&
        Objects.equals(this.dataPointId, icPMSMetadataDTO.dataPointId) &&
        Objects.equals(this.dataReductionPackageId, icPMSMetadataDTO.dataReductionPackageId) &&
        Objects.equals(this.dataReductionPackageName, icPMSMetadataDTO.dataReductionPackageName) &&
        Objects.equals(this.description, icPMSMetadataDTO.description) &&
        Objects.equals(this.id, icPMSMetadataDTO.id) &&
        Objects.equals(this.sampleIntroMethodId, icPMSMetadataDTO.sampleIntroMethodId) &&
        Objects.equals(this.sampleIntroMethodName, icPMSMetadataDTO.sampleIntroMethodName) &&
        Objects.equals(this.typeICPMSId, icPMSMetadataDTO.typeICPMSId) &&
        Objects.equals(this.typeICPMSName, icPMSMetadataDTO.typeICPMSName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticalSessionID, batchID, combinedMeasurementId, combinedMeasurementName, dataPointId, dataReductionPackageId, dataReductionPackageName, description, id, sampleIntroMethodId, sampleIntroMethodName, typeICPMSId, typeICPMSName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICPMSMetadataDTO {\n");
    
    sb.append("    analyticalSessionID: ").append(toIndentedString(analyticalSessionID)).append("\n");
    sb.append("    batchID: ").append(toIndentedString(batchID)).append("\n");
    sb.append("    combinedMeasurementId: ").append(toIndentedString(combinedMeasurementId)).append("\n");
    sb.append("    combinedMeasurementName: ").append(toIndentedString(combinedMeasurementName)).append("\n");
    sb.append("    dataPointId: ").append(toIndentedString(dataPointId)).append("\n");
    sb.append("    dataReductionPackageId: ").append(toIndentedString(dataReductionPackageId)).append("\n");
    sb.append("    dataReductionPackageName: ").append(toIndentedString(dataReductionPackageName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sampleIntroMethodId: ").append(toIndentedString(sampleIntroMethodId)).append("\n");
    sb.append("    sampleIntroMethodName: ").append(toIndentedString(sampleIntroMethodName)).append("\n");
    sb.append("    typeICPMSId: ").append(toIndentedString(typeICPMSId)).append("\n");
    sb.append("    typeICPMSName: ").append(toIndentedString(typeICPMSName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

