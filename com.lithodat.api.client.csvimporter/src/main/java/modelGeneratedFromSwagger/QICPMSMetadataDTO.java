/*
 * Lithosurfer API: Geochem model
 * Please have a look at the <a href=\"https://docs.google.com/presentation/d/1XcjHiopwNzasUvwC_7UZlkou82tfstEdqGZxqXITV3s/edit?usp=sharing\">High Level Docs</a> for getting the whole picture.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@lithosurfer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelGeneratedFromSwagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * @lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []
 */
@ApiModel(description = "@lithoModule [ICPMS] @lithoProfile [CHILD] @lithoParent [ICPMSMetadata] @lithoDocumentation [] @lithoLabel []")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-07T06:47:05.458Z")
public class QICPMSMetadataDTO {
  @SerializedName("collisionCellGas")
  private String collisionCellGas = null;

  @SerializedName("collisionCellGasFlow")
  private Float collisionCellGasFlow = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("detectionSystem")
  private String detectionSystem = null;

  @SerializedName("doublychargedMonitor")
  private String doublychargedMonitor = null;

  @SerializedName("doublychargedProduction")
  private Float doublychargedProduction = null;

  @SerializedName("dwellTimes")
  private String dwellTimes = null;

  @SerializedName("icpmsmetadataId")
  private Long icpmsmetadataId = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("makeupGasFlow")
  private Float makeupGasFlow = null;

  @SerializedName("massesMeasured")
  private String massesMeasured = null;

  @SerializedName("matchingRF")
  private Float matchingRF = null;

  @SerializedName("modelICPMSId")
  private Long modelICPMSId = null;

  @SerializedName("modelICPMSName")
  private String modelICPMSName = null;

  @SerializedName("nebGasFlow")
  private Float nebGasFlow = null;

  @SerializedName("oxideMonitor")
  private String oxideMonitor = null;

  @SerializedName("oxideProduction")
  private Float oxideProduction = null;

  @SerializedName("powerRF")
  private Integer powerRF = null;

  @SerializedName("sampleIntroduction")
  private String sampleIntroduction = null;

  @SerializedName("samplerCone")
  private String samplerCone = null;

  @SerializedName("samplingDepth")
  private Float samplingDepth = null;

  @SerializedName("skimmerCone")
  private String skimmerCone = null;

  public QICPMSMetadataDTO collisionCellGas(String collisionCellGas) {
    this.collisionCellGas = collisionCellGas;
    return this;
  }

   /**
   * @lithoLabel [Collision Cell Gas (when applicable)] @lithoDocumentation [Type of gas used in the collision cell (e.g. He)]
   * @return collisionCellGas
  **/
  @ApiModelProperty(value = "@lithoLabel [Collision Cell Gas (when applicable)] @lithoDocumentation [Type of gas used in the collision cell (e.g. He)]")
  public String getCollisionCellGas() {
    return collisionCellGas;
  }

  public void setCollisionCellGas(String collisionCellGas) {
    this.collisionCellGas = collisionCellGas;
  }

  public QICPMSMetadataDTO collisionCellGasFlow(Float collisionCellGasFlow) {
    this.collisionCellGasFlow = collisionCellGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Collision Cell Gas Flow (ml.min-1)] @lithoDocumentation [collision cell gas flow (ml.min-1)]
   * @return collisionCellGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Collision Cell Gas Flow (ml.min-1)] @lithoDocumentation [collision cell gas flow (ml.min-1)]")
  public Float getCollisionCellGasFlow() {
    return collisionCellGasFlow;
  }

  public void setCollisionCellGasFlow(Float collisionCellGasFlow) {
    this.collisionCellGasFlow = collisionCellGasFlow;
  }

  public QICPMSMetadataDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * @lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about Q-ICP-MS analytical methods]
   * @return description
  **/
  @ApiModelProperty(value = "@lithoLabel [Comments/additional Information] @lithoDocumentation [Additional information about Q-ICP-MS analytical methods]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public QICPMSMetadataDTO detectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
    return this;
  }

   /**
   * @lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. electron multiplier; mixed Faraday-multiple ion counting array)]
   * @return detectionSystem
  **/
  @ApiModelProperty(value = "@lithoLabel [Detection system] @lithoDocumentation [Type of detector used (e.g. electron multiplier; mixed Faraday-multiple ion counting array)]")
  public String getDetectionSystem() {
    return detectionSystem;
  }

  public void setDetectionSystem(String detectionSystem) {
    this.detectionSystem = detectionSystem;
  }

  public QICPMSMetadataDTO doublychargedMonitor(String doublychargedMonitor) {
    this.doublychargedMonitor = doublychargedMonitor;
    return this;
  }

   /**
   * @lithoLabel [Doubly-charged Species Monitor] @lithoDocumentation [Mass-ratio monitored to estimate doubly-charged species formation (e.g. 22Ca++/44Ca+ ; 70Ce++/ 140Ce+)]
   * @return doublychargedMonitor
  **/
  @ApiModelProperty(value = "@lithoLabel [Doubly-charged Species Monitor] @lithoDocumentation [Mass-ratio monitored to estimate doubly-charged species formation (e.g. 22Ca++/44Ca+ ; 70Ce++/ 140Ce+)]")
  public String getDoublychargedMonitor() {
    return doublychargedMonitor;
  }

  public void setDoublychargedMonitor(String doublychargedMonitor) {
    this.doublychargedMonitor = doublychargedMonitor;
  }

  public QICPMSMetadataDTO doublychargedProduction(Float doublychargedProduction) {
    this.doublychargedProduction = doublychargedProduction;
    return this;
  }

   /**
   * @lithoLabel [Doubly-charged Species Production (%)] @lithoDocumentation [Percentage of doubly-charged species formation (typically preferred to be below &gt; 1.5%)]
   * @return doublychargedProduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Doubly-charged Species Production (%)] @lithoDocumentation [Percentage of doubly-charged species formation (typically preferred to be below > 1.5%)]")
  public Float getDoublychargedProduction() {
    return doublychargedProduction;
  }

  public void setDoublychargedProduction(Float doublychargedProduction) {
    this.doublychargedProduction = doublychargedProduction;
  }

  public QICPMSMetadataDTO dwellTimes(String dwellTimes) {
    this.dwellTimes = dwellTimes;
    return this;
  }

   /**
   * @lithoLabel [Dwell Times (ms)] @lithoDocumentation [Counting time on each mass (e.g. 200 ms for each isotope; 200 ms on mass X and 100 ms on mass Y )]
   * @return dwellTimes
  **/
  @ApiModelProperty(value = "@lithoLabel [Dwell Times (ms)] @lithoDocumentation [Counting time on each mass (e.g. 200 ms for each isotope; 200 ms on mass X and 100 ms on mass Y )]")
  public String getDwellTimes() {
    return dwellTimes;
  }

  public void setDwellTimes(String dwellTimes) {
    this.dwellTimes = dwellTimes;
  }

  public QICPMSMetadataDTO icpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
    return this;
  }

   /**
   * Get icpmsmetadataId
   * @return icpmsmetadataId
  **/
  @ApiModelProperty(value = "")
  public Long getIcpmsmetadataId() {
    return icpmsmetadataId;
  }

  public void setIcpmsmetadataId(Long icpmsmetadataId) {
    this.icpmsmetadataId = icpmsmetadataId;
  }

  public QICPMSMetadataDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public QICPMSMetadataDTO makeupGasFlow(Float makeupGasFlow) {
    this.makeupGasFlow = makeupGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Make-up gas flow (l.min-1)] @lithoDocumentation [Make-up gas flow (l.min-1)]
   * @return makeupGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Make-up gas flow (l.min-1)] @lithoDocumentation [Make-up gas flow (l.min-1)]")
  public Float getMakeupGasFlow() {
    return makeupGasFlow;
  }

  public void setMakeupGasFlow(Float makeupGasFlow) {
    this.makeupGasFlow = makeupGasFlow;
  }

  public QICPMSMetadataDTO massesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
    return this;
  }

   /**
   * @lithoLabel [Masses measured] @lithoDocumentation [Masses Measured (e.g. 202–207, 235, 238)]
   * @return massesMeasured
  **/
  @ApiModelProperty(value = "@lithoLabel [Masses measured] @lithoDocumentation [Masses Measured (e.g. 202–207, 235, 238)]")
  public String getMassesMeasured() {
    return massesMeasured;
  }

  public void setMassesMeasured(String massesMeasured) {
    this.massesMeasured = massesMeasured;
  }

  public QICPMSMetadataDTO matchingRF(Float matchingRF) {
    this.matchingRF = matchingRF;
    return this;
  }

   /**
   * @lithoLabel [RF frequency matching (V)] @lithoDocumentation [RF matching compensates for changes in impedance (a material’s resistance to the flow of an electric current) produced by the sample’s matrix components or differences in solvent volatility.]
   * @return matchingRF
  **/
  @ApiModelProperty(value = "@lithoLabel [RF frequency matching (V)] @lithoDocumentation [RF matching compensates for changes in impedance (a material’s resistance to the flow of an electric current) produced by the sample’s matrix components or differences in solvent volatility.]")
  public Float getMatchingRF() {
    return matchingRF;
  }

  public void setMatchingRF(Float matchingRF) {
    this.matchingRF = matchingRF;
  }

  public QICPMSMetadataDTO modelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
    return this;
  }

   /**
   * Get modelICPMSId
   * @return modelICPMSId
  **/
  @ApiModelProperty(value = "")
  public Long getModelICPMSId() {
    return modelICPMSId;
  }

  public void setModelICPMSId(Long modelICPMSId) {
    this.modelICPMSId = modelICPMSId;
  }

  public QICPMSMetadataDTO modelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
    return this;
  }

   /**
   * Get modelICPMSName
   * @return modelICPMSName
  **/
  @ApiModelProperty(value = "")
  public String getModelICPMSName() {
    return modelICPMSName;
  }

  public void setModelICPMSName(String modelICPMSName) {
    this.modelICPMSName = modelICPMSName;
  }

  public QICPMSMetadataDTO nebGasFlow(Float nebGasFlow) {
    this.nebGasFlow = nebGasFlow;
    return this;
  }

   /**
   * @lithoLabel [Nebuliser Gas Flow (l.min-1)] @lithoDocumentation [Nebuliser gas flow (l.min-1)]
   * @return nebGasFlow
  **/
  @ApiModelProperty(value = "@lithoLabel [Nebuliser Gas Flow (l.min-1)] @lithoDocumentation [Nebuliser gas flow (l.min-1)]")
  public Float getNebGasFlow() {
    return nebGasFlow;
  }

  public void setNebGasFlow(Float nebGasFlow) {
    this.nebGasFlow = nebGasFlow;
  }

  public QICPMSMetadataDTO oxideMonitor(String oxideMonitor) {
    this.oxideMonitor = oxideMonitor;
    return this;
  }

   /**
   * @lithoLabel [Oxide monitor] @lithoDocumentation [Mass-ratio monitored to estimate oxide formation (e.g. 248ThO+/232Th+, 156CeO+/140Ce+)]
   * @return oxideMonitor
  **/
  @ApiModelProperty(value = "@lithoLabel [Oxide monitor] @lithoDocumentation [Mass-ratio monitored to estimate oxide formation (e.g. 248ThO+/232Th+, 156CeO+/140Ce+)]")
  public String getOxideMonitor() {
    return oxideMonitor;
  }

  public void setOxideMonitor(String oxideMonitor) {
    this.oxideMonitor = oxideMonitor;
  }

  public QICPMSMetadataDTO oxideProduction(Float oxideProduction) {
    this.oxideProduction = oxideProduction;
    return this;
  }

   /**
   * @lithoLabel [Oxide Production (%)] @lithoDocumentation [Percentage of oxide formation (typically preferred to be below &gt; 1%)]
   * @return oxideProduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Oxide Production (%)] @lithoDocumentation [Percentage of oxide formation (typically preferred to be below > 1%)]")
  public Float getOxideProduction() {
    return oxideProduction;
  }

  public void setOxideProduction(Float oxideProduction) {
    this.oxideProduction = oxideProduction;
  }

  public QICPMSMetadataDTO powerRF(Integer powerRF) {
    this.powerRF = powerRF;
    return this;
  }

   /**
   * @lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma (typically 1000-1500 W)]
   * @return powerRF
  **/
  @ApiModelProperty(value = "@lithoLabel [RF power (W)] @lithoDocumentation [Radio frequency power (W) applied to coil to generate plasma (typically 1000-1500 W)]")
  public Integer getPowerRF() {
    return powerRF;
  }

  public void setPowerRF(Integer powerRF) {
    this.powerRF = powerRF;
  }

  public QICPMSMetadataDTO sampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
    return this;
  }

   /**
   * @lithoLabel [Sample introduction details] @lithoDocumentation [Details of the sample ample introduction system (e.g. Laser ablation; Solution; Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]
   * @return sampleIntroduction
  **/
  @ApiModelProperty(value = "@lithoLabel [Sample introduction details] @lithoDocumentation [Details of the sample ample introduction system (e.g. Laser ablation; Solution; Ablation aerosol combined with co-aspiration of desolvated Tl-235U tracer using a DSN-100 desolvating nebuliser)]")
  public String getSampleIntroduction() {
    return sampleIntroduction;
  }

  public void setSampleIntroduction(String sampleIntroduction) {
    this.sampleIntroduction = sampleIntroduction;
  }

  public QICPMSMetadataDTO samplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
    return this;
  }

   /**
   * @lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]
   * @return samplerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampler Cone Details] @lithoDocumentation [Sampler cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. standard, jet), orifice dimension (internal diameter from 0.8 to 1.2 mm)]")
  public String getSamplerCone() {
    return samplerCone;
  }

  public void setSamplerCone(String samplerCone) {
    this.samplerCone = samplerCone;
  }

  public QICPMSMetadataDTO samplingDepth(Float samplingDepth) {
    this.samplingDepth = samplingDepth;
    return this;
  }

   /**
   * @lithoLabel [Sampling Depth (mm)] @lithoDocumentation [Distance in mm between coil and sampling cone]
   * @return samplingDepth
  **/
  @ApiModelProperty(value = "@lithoLabel [Sampling Depth (mm)] @lithoDocumentation [Distance in mm between coil and sampling cone]")
  public Float getSamplingDepth() {
    return samplingDepth;
  }

  public void setSamplingDepth(Float samplingDepth) {
    this.samplingDepth = samplingDepth;
  }

  public QICPMSMetadataDTO skimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
    return this;
  }

   /**
   * @lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]
   * @return skimmerCone
  **/
  @ApiModelProperty(value = "@lithoLabel [Skimmer Cone Details] @lithoDocumentation [Skimmer cone details, such as material (e.g. nickel, platinum, aluminium), geometry (e.g. H, X), orifice dimension (internal diameter from 0.4 to 0.8 mm)]")
  public String getSkimmerCone() {
    return skimmerCone;
  }

  public void setSkimmerCone(String skimmerCone) {
    this.skimmerCone = skimmerCone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QICPMSMetadataDTO qiCPMSMetadataDTO = (QICPMSMetadataDTO) o;
    return Objects.equals(this.collisionCellGas, qiCPMSMetadataDTO.collisionCellGas) &&
        Objects.equals(this.collisionCellGasFlow, qiCPMSMetadataDTO.collisionCellGasFlow) &&
        Objects.equals(this.description, qiCPMSMetadataDTO.description) &&
        Objects.equals(this.detectionSystem, qiCPMSMetadataDTO.detectionSystem) &&
        Objects.equals(this.doublychargedMonitor, qiCPMSMetadataDTO.doublychargedMonitor) &&
        Objects.equals(this.doublychargedProduction, qiCPMSMetadataDTO.doublychargedProduction) &&
        Objects.equals(this.dwellTimes, qiCPMSMetadataDTO.dwellTimes) &&
        Objects.equals(this.icpmsmetadataId, qiCPMSMetadataDTO.icpmsmetadataId) &&
        Objects.equals(this.id, qiCPMSMetadataDTO.id) &&
        Objects.equals(this.makeupGasFlow, qiCPMSMetadataDTO.makeupGasFlow) &&
        Objects.equals(this.massesMeasured, qiCPMSMetadataDTO.massesMeasured) &&
        Objects.equals(this.matchingRF, qiCPMSMetadataDTO.matchingRF) &&
        Objects.equals(this.modelICPMSId, qiCPMSMetadataDTO.modelICPMSId) &&
        Objects.equals(this.modelICPMSName, qiCPMSMetadataDTO.modelICPMSName) &&
        Objects.equals(this.nebGasFlow, qiCPMSMetadataDTO.nebGasFlow) &&
        Objects.equals(this.oxideMonitor, qiCPMSMetadataDTO.oxideMonitor) &&
        Objects.equals(this.oxideProduction, qiCPMSMetadataDTO.oxideProduction) &&
        Objects.equals(this.powerRF, qiCPMSMetadataDTO.powerRF) &&
        Objects.equals(this.sampleIntroduction, qiCPMSMetadataDTO.sampleIntroduction) &&
        Objects.equals(this.samplerCone, qiCPMSMetadataDTO.samplerCone) &&
        Objects.equals(this.samplingDepth, qiCPMSMetadataDTO.samplingDepth) &&
        Objects.equals(this.skimmerCone, qiCPMSMetadataDTO.skimmerCone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collisionCellGas, collisionCellGasFlow, description, detectionSystem, doublychargedMonitor, doublychargedProduction, dwellTimes, icpmsmetadataId, id, makeupGasFlow, massesMeasured, matchingRF, modelICPMSId, modelICPMSName, nebGasFlow, oxideMonitor, oxideProduction, powerRF, sampleIntroduction, samplerCone, samplingDepth, skimmerCone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QICPMSMetadataDTO {\n");
    
    sb.append("    collisionCellGas: ").append(toIndentedString(collisionCellGas)).append("\n");
    sb.append("    collisionCellGasFlow: ").append(toIndentedString(collisionCellGasFlow)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionSystem: ").append(toIndentedString(detectionSystem)).append("\n");
    sb.append("    doublychargedMonitor: ").append(toIndentedString(doublychargedMonitor)).append("\n");
    sb.append("    doublychargedProduction: ").append(toIndentedString(doublychargedProduction)).append("\n");
    sb.append("    dwellTimes: ").append(toIndentedString(dwellTimes)).append("\n");
    sb.append("    icpmsmetadataId: ").append(toIndentedString(icpmsmetadataId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    makeupGasFlow: ").append(toIndentedString(makeupGasFlow)).append("\n");
    sb.append("    massesMeasured: ").append(toIndentedString(massesMeasured)).append("\n");
    sb.append("    matchingRF: ").append(toIndentedString(matchingRF)).append("\n");
    sb.append("    modelICPMSId: ").append(toIndentedString(modelICPMSId)).append("\n");
    sb.append("    modelICPMSName: ").append(toIndentedString(modelICPMSName)).append("\n");
    sb.append("    nebGasFlow: ").append(toIndentedString(nebGasFlow)).append("\n");
    sb.append("    oxideMonitor: ").append(toIndentedString(oxideMonitor)).append("\n");
    sb.append("    oxideProduction: ").append(toIndentedString(oxideProduction)).append("\n");
    sb.append("    powerRF: ").append(toIndentedString(powerRF)).append("\n");
    sb.append("    sampleIntroduction: ").append(toIndentedString(sampleIntroduction)).append("\n");
    sb.append("    samplerCone: ").append(toIndentedString(samplerCone)).append("\n");
    sb.append("    samplingDepth: ").append(toIndentedString(samplingDepth)).append("\n");
    sb.append("    skimmerCone: ").append(toIndentedString(skimmerCone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

